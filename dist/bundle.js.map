{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/main.js","webpack:///./src/scripts/vivagraph.js","webpack:///(webpack)/buildin/global.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","App","callbackFunction","tx","console","log","socket","WebSocket","startSocket","callback","addEventListener","send","JSON","stringify","op","onmessage","event","parse","data","global","require","e","u","a","f","Error","code","length","1","random","Viva","lazyExtend","apply","this","arguments","randomIterator","events","Graph","version","graph","serializer","loadFromJSON","storeToJSON","centrality","operations","geom","intersect","intersectRect","webgl","webglInputEvents","generator","Input","domInputManager","webglInputManager","Utils","dragndrop","findElementPosition","timer","getDimension","Layout","forceDirected","constant","View","Texture","webglAtlas","webglImageNodeProgram","webglLinkProgram","webglNodeProgram","webglLine","webglSquare","webglImage","webglGraphics","_webglUtil","parseColor","svgGraphics","renderer","cssGraphics","svgNodeFactory","community","Rect","svg","BrowserInfo","./Algorithms/centrality.js","./Algorithms/operations.js","./Input/domInputManager.js","./Input/dragndrop.js","./Input/webglInputManager.js","./Layout/constant.js","./Utils/backwardCompatibleEvents.js","./Utils/browserInfo.js","./Utils/findElementPosition.js","./Utils/getDimensions.js","./Utils/intersectRect.js","./Utils/rect.js","./Utils/timer.js","./View/renderer.js","./View/svgGraphics.js","./View/webglGraphics.js","./WebGL/parseColor.js","./WebGL/texture.js","./WebGL/webgl.js","./WebGL/webglAtlas.js","./WebGL/webglImage.js","./WebGL/webglImageNodeProgram.js","./WebGL/webglInputEvents.js","./WebGL/webglLine.js","./WebGL/webglLinkProgram.js","./WebGL/webglNodeProgram.js","./WebGL/webglSquare.js","./version.js","gintersect","ngraph.events","ngraph.forcelayout","ngraph.fromjson","ngraph.generators","ngraph.graph","ngraph.merge","ngraph.random","ngraph.tojson","simplesvg","2","removeEventListener","el","eventName","listener","useCapture","Events","document","add","stdAttach","rm","stdDetach","oldIEAttach","oldIEDetach","attachEvent","detachEvent","3","x1","y1","x2","y2","x3","y3","x4","y4","a1","a2","b1","b2","c1","c2","r1","r2","r3","r4","denom","num","result","x","y","4","degree","betweenness","closeness","eccentricity","./src/betweenness.js","./src/closeness.js","./src/degree.js","./src/eccentricity.js","5","oriented","currentNode","Q","S","pred","dist","sigma","delta","forEachNode","node","id","source","nodeId","push","v","shift","forEachLinkedNode","toId","otherNode","w","processNode","singleSourceShortestPath","setDeltaToZero","pop","coeff","predcessors","idx","accumulate","keys","forEach","6","distances","map","filter","val","reachableNodesTotal","totalDistance","reduce","b","7","inDegreeCalculator","links","total","outDegreeCalculator","fromId","inoutDegreeCalculator","kind","getNodeDegree","toLowerCase","getLinks","8","maxDist","9","subject","reservedWords","validateSubject","eventsStorage","registeredEvents","on","ctx","handlers","off","wantToRemoveAll","deleteAllCallbacksForEvent","callbacks","splice","fire","fireArguments","Array","callbackInfo","createEventsStorage","10","augment","target","undefined","settings","toString","11","physicsSettings","physicsSimulator","createSimulator","nodeMass","nodeBodies","springs","bodiesCount","springTransform","noop","initBody","forEachLink","initLink","onGraphChanged","wasStable","api","step","lastMove","ratio","isStableNow","isStable","onStableChanged","getNodePosition","getInitializedBody","pos","setNodePosition","body","setPosition","slice","invalidateBBox","getLinkPosition","linkId","spring","from","to","getGraphRect","getBBox","forEachBody","cb","bodyId","pinNode","isPinned","isNodePinned","dispose","getBody","getSpring","link","hasLink","simulator","eventify","changes","change","changeType","releaseNode","releaseLink","getNodesCount","getNode","position","neighbors","maxNeighbors","Math","min","otherBody","getNeighborBodies","getBestNewBodyPosition","addBodyAt","updateBodyMass","isNodeOriginallyPinned","removeBody","fromBody","toBody","addSpring","removeSpring","mass","Number","isNaN","ngraph.physics.simulator","12","dup","13","jsonGraph","nodeTransform","linkTransform","stored","createGraph","nodes","parsedNode","addNode","addLink","14","factory","ladder","complete","j","g","completeBipartite","balancedBinTree","level","count","pow","root","left","right","path","circularLadder","grid","grid3","z","k","noLinks","wattsStrogatz","seed","neighborsSize","floor","nextDouble","newTo","next","needsRewire","removeLink","cliqueCircle","cliqueCount","cliqueSize","appendClique","size","15","inputSeed","Date","Generator","array","customRandom","localRandom","shuffle","maxValue","uniform","gaussian","sqrt","16","options","warn","multigraph","uniqueLinkId","multiEdges","nodesCount","suspendEvents","objectKeysIterator","forInIterator","createLink","makeLinkId","isMultiEdge","getLink","suffix","Link","recordLinkChange","recordNodeChange","enterModification","exitModification","graphPart","fromNode","toNode","addLinkToNode","removeNode","getLinksCount","forEachOrientedLink","linkedNodeId","forEachNonOrientedLink","beginUpdate","endUpdate","clear","hasNode","realOn","enterModificationReal","exitModificationReal","recordLinkChangeReal","recordNodeChangeReal","monitorSubscribers","prevLinks","indexOfElementInArray","fromNodeId","toNodeId","element","indexOf","len","17","merge","targetHasIt","optionsValueType","shouldReplace","18","Body","Vector2d","prevPos","force","velocity","Body3d","Vector3d","reset","19","Spring","expose","createQuadTree","springLength","springCoeff","gravity","theta","dragCoeff","timeStep","createBounds","createDragForce","createSpringForce","integrate","integrator","createBody","bodies","quadTree","bounds","springForce","dragForce","bboxNeedsUpdate","publicApi","insertBodies","updateBodyForce","update","accumulateForces","movement","addBody","body1","body2","springWeight","springCoefficient","getTotalMovement","getBestNewPosition","box","./lib/bounds","./lib/createBody","./lib/dragForce","./lib/eulerIntegrator","./lib/spring","./lib/springForce","ngraph.expose","ngraph.quadtreebh","20","boundingBox","MAX_VALUE","MIN_VALUE","graphRect","baseX","baseY","21","physics","ngraph.physics.primitives","22","23","dx","dy","ty","max","vx","vy","abs","24","weight","25","26","getChild","quad0","quad1","quad2","quad3","setChild","child","Node","InsertStack","isSamePosition","updateQueue","insertStack","nodesCache","currentInCache","newNode","top","bottom","insert","getRoot","sourceBody","queue","fx","fy","queueLength","shiftIdx","pushIdx","differentBody","massX","massY","newOptions","newBody","isEmpty","stackItem","oldBody","retriesCount","offset","quadIdx","./insertStack","./isSamePosition","./node","27","stack","popIdx","item","28","point1","point2","29","30","randomFunc","31","customNodeTransform","customLinkTransform","32","compile","compileTemplate","domEvents","svgns","xlinkns","attrBag","svgElement","compiledTempalte","window","createElementNS","attr","setAttributeNS","removeAttributeNS","getAttributeNS","append","content","appendChild","text","textContent","dataSource","model","attributes","attributeName","./lib/compile","./lib/compile_template","add-event-listener","33","parser","svgText","match","tagLength","substr","addNamespaces","parseFromString","documentElement","../","./domparser.js","34","domNode","allBindings","extractAllBindings","nodeType","typeSupported","hasChildNodes","domChildren","childNodes","nodeValue","modelNameMatch","BINDING_EXPR","modelPropertyName","propertyBindings","textSetter","bindTextContent","attrs","bindDomAttribute","changeModel","setter","domAttribute","attrName","localName","isSimpleValue","attributeSetter","35","fail","DOMParser","36","betweennessCentrality","toVivaGraphCentralityFormat","degreeCentrality","sort","ngraph.centrality","37","density","directed","NaN","38","graphics","nodeEvents","bindDragNDrop","nodeUI","getNodeUI","onStart","onDrag","onStop","release","./dragndrop.js","39","start","drag","end","scroll","prevSelectStart","prevDragStart","dragObject","startX","startY","touchInProgress","pinchZoomLength","move","clientX","clientY","stopPropagation","cancelBubble","preventDefault","handleDisabledEvent","handleMouseMove","handleMouseDown","isLeftButton","button","srcElement","documentEvents","handleMouseUp","onselectstart","ondragstart","handleMouseWheel","returnValue","mousePos","posx","posy","pageX","pageY","scrollLeft","scrollTop","getMousePos","elementOffset","relMousePos","wheelDelta","detail","updateScrollEvents","scrollCallback","browserInfo","browser","getPinchZoomLength","finger1","finger2","handleTouchMove","touches","touch","currentPinchLength","handleTouchEnd","handleTouchStart","handleSignleFingerTouch","onScroll","../Utils/browserInfo.js","../Utils/documentEvents.js","../Utils/findElementPosition.js","40","inputEvents","createInputEvents","draggedNode","internalHandlers","mouseDown","mouseCapture","mouseUp","releaseMouseCapture","mouseMove","../WebGL/webglInputEvents.js","41","userSettings","maxX","maxY","rand","layoutLinks","placeNodeCallback","layoutNodes","ensureNodeInitialized","updateGraphRect","updateNodePositions","ensureLinkInitialized","run","iterationsCount","placeNode","newPlaceNodeCallbackOrNode","../Utils/rect.js","42","extend","stop","backwardCompatible","43","ua","navigator","userAgent","exec","44","nullEvents","handler","./nullEvents.js","45","obj","curleft","curtop","offsetParent","offsetLeft","offsetTop","46","container","message","width","clientWidth","height","clientHeight","47","48","49","50","scope","lastTime","vendors","setTimeout","clearTimeout","requestAnimationFrame","vendorPrefix","cancelAnimationFrame","currTime","getTime","timeToCall","intervalId","startTimer","stopTimer","restart","createTimer","self","51","52","inputManager","animationTimer","containerDrag","FRAME_INTERVAL","layout","interactive","rendererInitialized","updateCenterRequired","userInteraction","isPaused","transform","offsetX","offsetY","scale","publicEvents","renderLinks","prerender","init","createNodeUi","createLinkUi","updateCenter","windowEvents","onWindowResized","releaseContainerDragManager","isInteractive","translateRel","renderGraph","scaleOffset","scrollPoint","listenNodeEvents","releaseGraphEvents","onRenderFrame","renderIterations","resetScale","pause","resume","rerender","zoomOut","zoomIn","getTransform","moveTo","graphCenterChanged","getGraphics","getLayout","removeLinkUi","releaseNodeEvents","removeNodeUi","interactionName","beginRender","renderNodes","endRender","resetStable","containerSize","cx","cy","nodePosition","linkPosition","wasPinned","oldPos","processNodeChange","processLinkChange","out","scaleFactor","../Input/domInputManager.js","../Input/dragndrop.js","../Utils/getDimensions.js","../Utils/timer.js","../Utils/windowEvents.js","./svgGraphics.js","53","svgContainer","svgRoot","initCallback","actualScale","allNodes","allLinks","nodeBuilder","nodePositionCallback","linkBuilder","linkPositionCallback","linkUI","fromPos","toPos","fireRescaled","cachedPos","cachedFromPos","cachedToPos","updateTransform","createSvgRoot","getLinkUI","builderCallback","newPlaceCallback","placeLink","newPlaceLinkCallback","createSVGPoint","getCTM","origin","matrixTransform","inverse","createSVGMatrix","translate","multiply","removeChild","childElementCount","insertBefore","firstChild","getGraphicsRoot","callbackWhenReady","getSvgRoot","54","enableBlending","preserveDrawingBuffer","clearColor","clearColorValue","graphicsRoot","gl","userPlaceNodeCallback","userPlaceLinkCallback","linksCount","linkProgram","nodeProgram","nodeUIBuilder","linkUIBuilder","updateTransformUniform","resetScaleInternal","updateSize","offsetWidth","offsetHeight","viewport","createElement","render","bringLinkToFront","srcLinkId","temp","frontLinkId","getFrontLinkId","bringToFront","boundPosition","uiid","ui","createNode","contextParameters","getContext","msg","alert","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","color","COLOR_BUFFER_BIT","load","isSupported","linkIdToRemove","lastLinkUI","nodeIdToRemove","lastNodeUI","replaceProperties","omitLinksRendering","setNodeProgram","newProgram","setLinkProgram","transformClientToGraphCoordinates","transformGraphToClientCoordinates","getNodeAtClientPos","clientPos","preciseCheck","../Input/webglInputManager.js","../WebGL/webglLine.js","../WebGL/webglLinkProgram.js","../WebGL/webglNodeProgram.js","../WebGL/webglSquare.js","55","parsedColor","replace","parseInt","56","canvas","isDirty","57","copyArrayPart","elementsCount","swapArrayPart","tmp","createProgram","vertexShaderSrc","fragmentShaderSrc","program","vs","createShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","attachShader","getProgramParameter","LINK_STATUS","getShaderInfoLog","extendArray","buffer","itemsInBuffer","elementsPerItem","extendedArray","Float32Array","set","getLocations","uniformOrAttributeNames","foundLocations","location","getAttribLocation","getUniformLocation","context","shaderText","type","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","58","tilesPerTexture","dirtyTimeoutId","tilesPerRow","tileSize","lastLoadedIdx","loadedImages","skipedDirty","textures","trackedUrls","isPowerOf2","clearDirty","remove","imgUrl","coordinates","tileToRemove","getTileCoordinates","fromCanvas","textureNumber","toCtx","col","row","drawImage","copy","markDirty","getTextures","getCoordinates","img","Image","imgId","crossOrigin","onload","tileNumber","tilePosition","texture","createTexture","currentTexture","src","drawAt","absolutePosition","localTileNumber","markDirtyNow","./texture.js","59","_texture","_offset","60","WebglAtlas","glUtils","atlas","utils","locations","sizeDirty","ATTRIBUTES_PER_PRIMITIVE","nodesFS","join","nodesVS","glContext","useProgram","uniform1f","enableVertexAttribArray","vertexPos","customAttributes","createBuffer","replacedNode","newTransform","h","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","uniformMatrix4fv","uniform2f","screenSize","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","nativeObject","refreshTexture","ensureAtlasTextureUpdated","drawArrays","TRIANGLES","deleteTexture","activeTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","uniform1i","./webgl.js","./webglAtlas.js","61","boundRect","mouseCapturedNode","mouseEnterCallback","mouseLeaveCallback","mouseDownCallback","mouseUpCallback","mouseMoveCallback","clickCallback","dblClickCallback","lastFound","lastUpdate","lastClickTime","invoke","updateBoundRect","getBoundingClientRect","args","clickTime","nodeAtClientPos","sameNode","startListen","mouseEnter","mouseLeave","click","dblClick","half","callbacksChain","62","./parseColor.js","63","BYTES_PER_LINK","Uint32Array","linksFS","linksVS","storage","ArrayBuffer","positions","colors","linkUi","linkIdx","byteLength","extendedStorage","extendedPositions","extendedColors","ensureEnoughStorage","LINES","64","BYTES_PER_NODE","POINTS","65","66","Function","eval"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const vivagraph = require('./vivagraph');\n\nconst App = (function () {\n  const callbackFunction = (tx) => {\n    console.log(tx);\n  };\n\n  return {\n    callbackFunction,\n  };\n}());\n\nconst SocketUtils = (function () {\n  const socket = new WebSocket('wss://ws.blockchain.info/inv');\n\n  const startSocket = (callback) => {\n    socket.addEventListener('open', () => {\n      socket.send(JSON.stringify({ op: 'unconfirmed_sub' }));\n    });\n    socket.onmessage = (event) => {\n      const tx = JSON.parse(event.data);\n      callback(tx);\n    };\n  };\n  return {\n    startSocket,\n  };\n}());\n\nSocketUtils.startSocket(App.callbackFunction);\n\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.Viva=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\r\n * This is an entry point for global namespace. If you want to use separate\r\n * modules individually - you are more than welcome to do so.\r\n */\r\n\r\nvar random = require('ngraph.random');\r\n\r\nvar Viva = {\r\n  lazyExtend: function() {\r\n    return require('ngraph.merge').apply(this, arguments);\r\n  },\r\n  randomIterator: function() {\r\n    return random.randomIterator.apply(random, arguments);\r\n  },\r\n  random: function() {\r\n    return random.random.apply(random, arguments);\r\n  },\r\n  events: require('ngraph.events')\r\n};\r\n\r\nViva.Graph = {\r\n  version: require('./version.js'),\r\n  graph: require('ngraph.graph'),\r\n\r\n  serializer: function() {\r\n    return {\r\n      loadFromJSON: require('ngraph.fromjson'),\r\n      storeToJSON: require('ngraph.tojson')\r\n    };\r\n  },\r\n\r\n  centrality: require('./Algorithms/centrality.js'),\r\n  operations: require('./Algorithms/operations.js'),\r\n\r\n  geom: function() {\r\n    return {\r\n      intersect: require('gintersect'),\r\n      intersectRect: require('./Utils/intersectRect.js')\r\n    };\r\n  },\r\n\r\n  webgl: require('./WebGL/webgl.js'),\r\n  webglInputEvents: require('./WebGL/webglInputEvents.js'),\r\n\r\n  generator: function() {\r\n    return require('ngraph.generators');\r\n  },\r\n\r\n  Input: {\r\n    domInputManager: require('./Input/domInputManager.js'),\r\n    webglInputManager: require('./Input/webglInputManager.js')\r\n  },\r\n\r\n  Utils: {\r\n    // TODO: move to Input\r\n    dragndrop: require('./Input/dragndrop.js'),\r\n    findElementPosition: require('./Utils/findElementPosition.js'),\r\n    timer: require('./Utils/timer.js'),\r\n    getDimension: require('./Utils/getDimensions.js'),\r\n    events: require('./Utils/backwardCompatibleEvents.js')\r\n  },\r\n\r\n  Layout: {\r\n    forceDirected: require('ngraph.forcelayout'),\r\n    constant: require('./Layout/constant.js')\r\n  },\r\n\r\n  View: {\r\n    // TODO: Move `webglXXX` out to webgl namespace\r\n    Texture: require('./WebGL/texture.js'),\r\n    // TODO: This should not be even exported\r\n    webglAtlas: require('./WebGL/webglAtlas.js'),\r\n    webglImageNodeProgram: require('./WebGL/webglImageNodeProgram.js'),\r\n    webglLinkProgram: require('./WebGL/webglLinkProgram.js'),\r\n    webglNodeProgram: require('./WebGL/webglNodeProgram.js'),\r\n    webglLine: require('./WebGL/webglLine.js'),\r\n    webglSquare: require('./WebGL/webglSquare.js'),\r\n    webglImage: require('./WebGL/webglImage.js'),\r\n    webglGraphics: require('./View/webglGraphics.js'),\r\n    // TODO: Deprecate this:\r\n    _webglUtil: {\r\n      parseColor: require('./WebGL/parseColor.js')\r\n    },\r\n\r\n    // TODO: move to svg namespace\r\n    svgGraphics: require('./View/svgGraphics.js'),\r\n\r\n    renderer: require('./View/renderer.js'),\r\n\r\n    // deprecated\r\n    cssGraphics: function() {\r\n      throw new Error('cssGraphics is deprecated. Please use older version of vivagraph (< 0.7) if you need it');\r\n    },\r\n\r\n    svgNodeFactory: function() {\r\n      throw new Error('svgNodeFactory is deprecated. Please use older version of vivagraph (< 0.7) if you need it');\r\n    },\r\n\r\n    community: function() {\r\n      throw new Error('community is deprecated. Please use vivagraph < 0.7 if you need it, or `https://github.com/anvaka/ngraph.slpa` module');\r\n    }\r\n  },\r\n\r\n  Rect: require('./Utils/rect.js'),\r\n\r\n  svg: require('simplesvg'),\r\n\r\n  // TODO: should be camelCase\r\n  BrowserInfo: require('./Utils/browserInfo.js')\r\n};\r\n\r\nmodule.exports = Viva;\r\n\n},{\"./Algorithms/centrality.js\":36,\"./Algorithms/operations.js\":37,\"./Input/domInputManager.js\":38,\"./Input/dragndrop.js\":39,\"./Input/webglInputManager.js\":40,\"./Layout/constant.js\":41,\"./Utils/backwardCompatibleEvents.js\":42,\"./Utils/browserInfo.js\":43,\"./Utils/findElementPosition.js\":45,\"./Utils/getDimensions.js\":46,\"./Utils/intersectRect.js\":47,\"./Utils/rect.js\":49,\"./Utils/timer.js\":50,\"./View/renderer.js\":52,\"./View/svgGraphics.js\":53,\"./View/webglGraphics.js\":54,\"./WebGL/parseColor.js\":55,\"./WebGL/texture.js\":56,\"./WebGL/webgl.js\":57,\"./WebGL/webglAtlas.js\":58,\"./WebGL/webglImage.js\":59,\"./WebGL/webglImageNodeProgram.js\":60,\"./WebGL/webglInputEvents.js\":61,\"./WebGL/webglLine.js\":62,\"./WebGL/webglLinkProgram.js\":63,\"./WebGL/webglNodeProgram.js\":64,\"./WebGL/webglSquare.js\":65,\"./version.js\":66,\"gintersect\":3,\"ngraph.events\":9,\"ngraph.forcelayout\":11,\"ngraph.fromjson\":13,\"ngraph.generators\":14,\"ngraph.graph\":16,\"ngraph.merge\":17,\"ngraph.random\":30,\"ngraph.tojson\":31,\"simplesvg\":32}],2:[function(require,module,exports){\naddEventListener.removeEventListener = removeEventListener\naddEventListener.addEventListener = addEventListener\n\nmodule.exports = addEventListener\n\nvar Events = null\n\nfunction addEventListener(el, eventName, listener, useCapture) {\n  Events = Events || (\n    document.addEventListener ?\n    {add: stdAttach, rm: stdDetach} :\n    {add: oldIEAttach, rm: oldIEDetach}\n  )\n  \n  return Events.add(el, eventName, listener, useCapture)\n}\n\nfunction removeEventListener(el, eventName, listener, useCapture) {\n  Events = Events || (\n    document.addEventListener ?\n    {add: stdAttach, rm: stdDetach} :\n    {add: oldIEAttach, rm: oldIEDetach}\n  )\n  \n  return Events.rm(el, eventName, listener, useCapture)\n}\n\nfunction stdAttach(el, eventName, listener, useCapture) {\n  el.addEventListener(eventName, listener, useCapture)\n}\n\nfunction stdDetach(el, eventName, listener, useCapture) {\n  el.removeEventListener(eventName, listener, useCapture)\n}\n\nfunction oldIEAttach(el, eventName, listener, useCapture) {\n  if(useCapture) {\n    throw new Error('cannot useCapture in oldIE')\n  }\n\n  el.attachEvent('on' + eventName, listener)\n}\n\nfunction oldIEDetach(el, eventName, listener, useCapture) {\n  el.detachEvent('on' + eventName, listener)\n}\n\n},{}],3:[function(require,module,exports){\nmodule.exports = intersect;\n\n/**\n * Original authors: Mukesh Prasad, Appeared in Graphics Gem II book\n * http://www.opensource.apple.com/source/graphviz/graphviz-498/graphviz/dynagraph/common/xlines.c\n * and adopted to javascript version by Andrei Kashcha.\n *\n * This function computes whether two line segments,\n * respectively joining the input points (x1,y1) -- (x2,y2)\n * and the input points (x3,y3) -- (x4,y4) intersect.\n * If the lines intersect, the output variables x, y are\n * set to coordinates of the point of intersection.\n *\n * @param {Number} x1 First line segment coordinates\n * @param {Number} y1 First line segment coordinates\n * @param {Number} x2 First line segment coordinates\n * @param {Number} x2 First line segment coordinates\n *\n * @param {Number} x3 Second line segment coordinates\n * @param {Number} y3 Second line segment coordinates\n * @param {Number} x4 Second line segment coordinates\n * @param {Number} x4 Second line segment coordinates\n *\n * @return {Object} x, y coordinates of intersection point or falsy value if no\n * intersection found..\n */\nfunction intersect(\n  x1, y1, x2, y2, // first line segment\n  x3, y3, x4, y4  // second line segment\n) {\n\n  var a1, a2, b1, b2, c1, c2, /* Coefficients of line eqns. */\n    r1, r2, r3, r4, /* 'Sign' values */\n    denom, offset, num, /* Intermediate values */\n    result = {\n      x: 0,\n      y: 0\n    };\n\n  /* Compute a1, b1, c1, where line joining points 1 and 2\n   * is \"a1 x  +  b1 y  +  c1  =  0\".\n   */\n  a1 = y2 - y1;\n  b1 = x1 - x2;\n  c1 = x2 * y1 - x1 * y2;\n\n  /* Compute r3 and r4.\n   */\n  r3 = a1 * x3 + b1 * y3 + c1;\n  r4 = a1 * x4 + b1 * y4 + c1;\n\n  /* Check signs of r3 and r4.  If both point 3 and point 4 lie on\n   * same side of line 1, the line segments do not intersect.\n   */\n\n  if (r3 !== 0 && r4 !== 0 && ((r3 >= 0) === (r4 >= 4))) {\n    return null; //no intersection.\n  }\n\n  /* Compute a2, b2, c2 */\n  a2 = y4 - y3;\n  b2 = x3 - x4;\n  c2 = x4 * y3 - x3 * y4;\n\n  /* Compute r1 and r2 */\n\n  r1 = a2 * x1 + b2 * y1 + c2;\n  r2 = a2 * x2 + b2 * y2 + c2;\n\n  /* Check signs of r1 and r2.  If both point 1 and point 2 lie\n   * on same side of second line segment, the line segments do\n   * not intersect.\n   */\n  if (r1 !== 0 && r2 !== 0 && ((r1 >= 0) === (r2 >= 0))) {\n    return null; // no intersection;\n  }\n  /* Line segments intersect: compute intersection point.\n   */\n\n  denom = a1 * b2 - a2 * b1;\n  if (denom === 0) {\n    return null; // Actually collinear..\n  }\n\n  offset = denom < 0 ? -denom / 2 : denom / 2;\n  offset = 0.0;\n\n  /* The denom/2 is to get rounding instead of truncating.  It\n   * is added or subtracted to the numerator, depending upon the\n   * sign of the numerator.\n   */\n  num = b1 * c2 - b2 * c1;\n  result.x = (num < 0 ? num - offset : num + offset) / denom;\n\n  num = a2 * c1 - a1 * c2;\n  result.y = (num < 0 ? num - offset : num + offset) / denom;\n\n  return result;\n}\n\n},{}],4:[function(require,module,exports){\nmodule.exports.degree = require('./src/degree.js');\nmodule.exports.betweenness = require('./src/betweenness.js');\nmodule.exports.closeness = require('./src/closeness.js');\nmodule.exports.eccentricity = require('./src/eccentricity.js');\n\n},{\"./src/betweenness.js\":5,\"./src/closeness.js\":6,\"./src/degree.js\":7,\"./src/eccentricity.js\":8}],5:[function(require,module,exports){\nmodule.exports = betweennes;\n\n/**\n * I'm using http://www.inf.uni-konstanz.de/algo/publications/b-vspbc-08.pdf\n * as a reference for this implementation\n */\nfunction betweennes(graph, oriented) {\n  var Q = [],\n    S = []; // Queue and Stack\n  // list of predcessors on shorteest paths from source\n  var pred = Object.create(null);\n  // distance from source\n  var dist = Object.create(null);\n  // number of shortest paths from source to key\n  var sigma = Object.create(null);\n  // dependency of source on key\n  var delta = Object.create(null);\n\n  var currentNode;\n  var centrality = Object.create(null);\n\n  graph.forEachNode(setCentralityToZero);\n  graph.forEachNode(calculateCentrality);\n\n  if (!oriented) {\n    // The centrality scores need to be divided by two if the graph is not oriented,\n    // since all shortest paths are considered twice\n    Object.keys(centrality).forEach(divideByTwo);\n  }\n\n  return centrality;\n\n  function divideByTwo(key) {\n    centrality[key] /= 2;\n  }\n\n  function setCentralityToZero(node) {\n    centrality[node.id] = 0;\n  }\n\n  function calculateCentrality(node) {\n    currentNode = node.id;\n    singleSourceShortestPath(currentNode);\n    accumulate();\n  }\n\n  function accumulate() {\n    graph.forEachNode(setDeltaToZero);\n    while (S.length) {\n      var w = S.pop();\n      var coeff = (1 + delta[w])/sigma[w];\n      var predcessors = pred[w];\n      for (var idx = 0; idx < predcessors.length; ++idx) {\n        var v = predcessors[idx];\n        delta[v] += sigma[v] * coeff;\n      }\n      if (w !== currentNode) {\n        centrality[w] += delta[w];\n      }\n    }\n  }\n\n  function setDeltaToZero(node) {\n    delta[node.id] = 0;\n  }\n\n  function singleSourceShortestPath(source) {\n    graph.forEachNode(initNode);\n    dist[source] = 0;\n    sigma[source] = 1;\n    Q.push(source);\n\n    while (Q.length) {\n      var v = Q.shift();\n      S.push(v);\n      graph.forEachLinkedNode(v, toId, oriented);\n    }\n\n    function toId(otherNode) {\n      // NOTE: This code will also consider multi-edges, which are often\n      // ignored by popular software (Gephi/NetworkX). Depending on your use\n      // case this may not be desired and deduping needs to be performed. To\n      // save memory I'm not deduping here...\n      processNode(otherNode.id);\n    }\n\n    function initNode(node) {\n      var nodeId = node.id;\n      pred[nodeId] = []; // empty list\n      dist[nodeId] = -1;\n      sigma[nodeId] = 0;\n    }\n\n    function processNode(w) {\n      // path discovery\n      if (dist[w] === -1) {\n        // Node w is found for the first time\n        dist[w] = dist[v] + 1;\n        Q.push(w);\n      }\n      // path counting\n      if (dist[w] === dist[v] + 1) {\n        // edge (v, w) on a shortest path\n        sigma[w] += sigma[v];\n        pred[w].push(v);\n      }\n    }\n  }\n}\n\n},{}],6:[function(require,module,exports){\nmodule.exports = closeness;\r\n\r\n/**\r\n * In a connected graph, the normalized closeness centrality of a node is the average\r\n * length of the shortest path between the node and all other nodes in the\r\n * graph. Thus the more central a node is, the closer it is to all other nodes.\r\n */\r\nfunction closeness(graph, oriented) {\r\n  var Q = [];\r\n  // list of predcessors on shortest paths from source\r\n  // distance from source\r\n  var dist = Object.create(null);\r\n\r\n  var currentNode;\r\n  var centrality = Object.create(null);\r\n\r\n  graph.forEachNode(setCentralityToZero);\r\n  graph.forEachNode(calculateCentrality);\r\n\r\n  return centrality;\r\n\r\n  function setCentralityToZero(node) {\r\n    centrality[node.id] = 0;\r\n  }\r\n\r\n  function calculateCentrality(node) {\r\n    currentNode = node.id;\r\n    singleSourceShortestPath(currentNode);\r\n    accumulate();\r\n  }\r\n\r\n  function accumulate() {\r\n    // Add all distances for node to array, excluding -1s\r\n    var distances = Object.keys(dist).map(function(key) {return dist[key]}).filter(function(val){return val !== -1});\r\n    // Set number of reachable nodes\r\n    var reachableNodesTotal = distances.length;\r\n    // Compute sum of all distances for node\r\n    var totalDistance = distances.reduce(function(a,b) { return a + b });\r\n    if (totalDistance > 0) {\r\n      centrality[currentNode] = ((reachableNodesTotal - 1) / totalDistance); \r\n    } else {\r\n      centrality[currentNode] = 0;\r\n    }\r\n  }\r\n\r\n  function singleSourceShortestPath(source) {\r\n    graph.forEachNode(initNode);\r\n    dist[source] = 0;\r\n    Q.push(source);\r\n\r\n    while (Q.length) {\r\n      var v = Q.shift();\r\n      graph.forEachLinkedNode(v, processNode, oriented);\r\n    }\r\n\r\n    function initNode(node) {\r\n      var nodeId = node.id;\r\n      dist[nodeId] = -1;\r\n    }\r\n\r\n    function processNode(otherNode) {\r\n      var w = otherNode.id\r\n      if (dist[w] === -1) {\r\n        // Node w is found for the first time\r\n        dist[w] = dist[v] + 1;\r\n        Q.push(w);\r\n      }\r\n    }\r\n  }\r\n}\r\n\n},{}],7:[function(require,module,exports){\nmodule.exports = degree;\n\n/**\n * Calculates graph nodes degree centrality (in/out or both).\n *\n * @see http://en.wikipedia.org/wiki/Centrality#Degree_centrality\n *\n * @param {ngraph.graph} graph object for which we are calculating centrality.\n * @param {string} [kind=both] What kind of degree centrality needs to be calculated:\n *   'in'    - calculate in-degree centrality\n *   'out'   - calculate out-degree centrality\n *   'inout' - (default) generic degree centrality is calculated\n */\nfunction degree(graph, kind) {\n  var getNodeDegree;\n  var result = Object.create(null);\n\n  kind = (kind || 'both').toLowerCase();\n  if (kind === 'both' || kind === 'inout') {\n    getNodeDegree = inoutDegreeCalculator;\n  } else if (kind === 'in') {\n    getNodeDegree = inDegreeCalculator;\n  } else if (kind === 'out') {\n    getNodeDegree = outDegreeCalculator;\n  } else {\n    throw new Error('Expected centrality degree kind is: in, out or both');\n  }\n\n  graph.forEachNode(calculateNodeDegree);\n\n  return result;\n\n  function calculateNodeDegree(node) {\n    var links = graph.getLinks(node.id);\n    result[node.id] = getNodeDegree(links, node.id);\n  }\n}\n\nfunction inDegreeCalculator(links, nodeId) {\n  var total = 0;\n  if (!links) return total;\n\n  for (var i = 0; i < links.length; i += 1) {\n    total += (links[i].toId === nodeId) ? 1 : 0;\n  }\n  return total;\n}\n\nfunction outDegreeCalculator(links, nodeId) {\n  var total = 0;\n  if (!links) return total;\n\n  for (var i = 0; i < links.length; i += 1) {\n    total += (links[i].fromId === nodeId) ? 1 : 0;\n  }\n  return total;\n}\n\nfunction inoutDegreeCalculator(links) {\n  if (!links) return 0;\n\n  return links.length;\n}\n\n},{}],8:[function(require,module,exports){\nmodule.exports = eccentricity;\r\n\r\n/**\r\n * The eccentricity centrality of a node is the greatest distance between that node and\r\n * any other node in the network. \r\n */\r\nfunction eccentricity(graph, oriented) {\r\n  var Q = [];\r\n  // distance from source\r\n  var dist = Object.create(null);\r\n\r\n  var currentNode;\r\n  var centrality = Object.create(null);\r\n\r\n  graph.forEachNode(setCentralityToZero);\r\n  graph.forEachNode(calculateCentrality);\r\n\r\n  return centrality;\r\n\r\n  function setCentralityToZero(node) {\r\n    centrality[node.id] = 0;\r\n  }\r\n\r\n  function calculateCentrality(node) {\r\n    currentNode = node.id;\r\n    singleSourceShortestPath(currentNode);\r\n    accumulate();\r\n  }\r\n\r\n  function accumulate() {\r\n    var maxDist = 0;\r\n    Object.keys(dist).forEach(function (key) {\r\n      var val = dist[key];\r\n      if (maxDist < val) maxDist = val;\r\n    });\r\n\r\n    centrality[currentNode] = maxDist;\r\n  }\r\n\r\n  function singleSourceShortestPath(source) {\r\n    graph.forEachNode(initNode);\r\n    dist[source] = 0;\r\n    Q.push(source);\r\n\r\n    while (Q.length) {\r\n      var v = Q.shift();\r\n      graph.forEachLinkedNode(v, processNode, oriented);\r\n    }\r\n\r\n    function initNode(node) {\r\n      var nodeId = node.id;\r\n      dist[nodeId] = -1;\r\n    }\r\n\r\n    function processNode(otherNode) {\r\n      var w = otherNode.id\r\n      if (dist[w] === -1) {\r\n        // Node w is found for the first time\r\n        dist[w] = dist[v] + 1;\r\n        Q.push(w);\r\n      }\r\n    }\r\n  }\r\n}\r\n\n},{}],9:[function(require,module,exports){\nmodule.exports = function(subject) {\n  validateSubject(subject);\n\n  var eventsStorage = createEventsStorage(subject);\n  subject.on = eventsStorage.on;\n  subject.off = eventsStorage.off;\n  subject.fire = eventsStorage.fire;\n  return subject;\n};\n\nfunction createEventsStorage(subject) {\n  // Store all event listeners to this hash. Key is event name, value is array\n  // of callback records.\n  //\n  // A callback record consists of callback function and its optional context:\n  // { 'eventName' => [{callback: function, ctx: object}] }\n  var registeredEvents = Object.create(null);\n\n  return {\n    on: function (eventName, callback, ctx) {\n      if (typeof callback !== 'function') {\n        throw new Error('callback is expected to be a function');\n      }\n      var handlers = registeredEvents[eventName];\n      if (!handlers) {\n        handlers = registeredEvents[eventName] = [];\n      }\n      handlers.push({callback: callback, ctx: ctx});\n\n      return subject;\n    },\n\n    off: function (eventName, callback) {\n      var wantToRemoveAll = (typeof eventName === 'undefined');\n      if (wantToRemoveAll) {\n        // Killing old events storage should be enough in this case:\n        registeredEvents = Object.create(null);\n        return subject;\n      }\n\n      if (registeredEvents[eventName]) {\n        var deleteAllCallbacksForEvent = (typeof callback !== 'function');\n        if (deleteAllCallbacksForEvent) {\n          delete registeredEvents[eventName];\n        } else {\n          var callbacks = registeredEvents[eventName];\n          for (var i = 0; i < callbacks.length; ++i) {\n            if (callbacks[i].callback === callback) {\n              callbacks.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      return subject;\n    },\n\n    fire: function (eventName) {\n      var callbacks = registeredEvents[eventName];\n      if (!callbacks) {\n        return subject;\n      }\n\n      var fireArguments;\n      if (arguments.length > 1) {\n        fireArguments = Array.prototype.splice.call(arguments, 1);\n      }\n      for(var i = 0; i < callbacks.length; ++i) {\n        var callbackInfo = callbacks[i];\n        callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);\n      }\n\n      return subject;\n    }\n  };\n}\n\nfunction validateSubject(subject) {\n  if (!subject) {\n    throw new Error('Eventify cannot use falsy object as events subject');\n  }\n  var reservedWords = ['on', 'fire', 'off'];\n  for (var i = 0; i < reservedWords.length; ++i) {\n    if (subject.hasOwnProperty(reservedWords[i])) {\n      throw new Error(\"Subject cannot be eventified, since it already has property '\" + reservedWords[i] + \"'\");\n    }\n  }\n}\n\n},{}],10:[function(require,module,exports){\nmodule.exports = exposeProperties;\n\n/**\n * Augments `target` object with getter/setter functions, which modify settings\n *\n * @example\n *  var target = {};\n *  exposeProperties({ age: 42}, target);\n *  target.age(); // returns 42\n *  target.age(24); // make age 24;\n *\n *  var filteredTarget = {};\n *  exposeProperties({ age: 42, name: 'John'}, filteredTarget, ['name']);\n *  filteredTarget.name(); // returns 'John'\n *  filteredTarget.age === undefined; // true\n */\nfunction exposeProperties(settings, target, filter) {\n  var needsFilter = Object.prototype.toString.call(filter) === '[object Array]';\n  if (needsFilter) {\n    for (var i = 0; i < filter.length; ++i) {\n      augment(settings, target, filter[i]);\n    }\n  } else {\n    for (var key in settings) {\n      augment(settings, target, key);\n    }\n  }\n}\n\nfunction augment(source, target, key) {\n  if (source.hasOwnProperty(key)) {\n    if (typeof target[key] === 'function') {\n      // this accessor is already defined. Ignore it\n      return;\n    }\n    target[key] = function (value) {\n      if (value !== undefined) {\n        source[key] = value;\n        return target;\n      }\n      return source[key];\n    }\n  }\n}\n\n},{}],11:[function(require,module,exports){\nmodule.exports = createLayout;\nmodule.exports.simulator = require('ngraph.physics.simulator');\n\nvar eventify = require('ngraph.events');\n\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n\n  var createSimulator = require('ngraph.physics.simulator');\n  var physicsSimulator = createSimulator(physicsSettings);\n\n  var nodeMass = defaultNodeMass\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass\n  }\n\n  var nodeBodies = Object.create(null);\n  var springs = {};\n  var bodiesCount = 0;\n\n  var springTransform = physicsSimulator.settings.springTransform || noop;\n\n  // Initialize physics with what we have in the graph:\n  initPhysics();\n  listenToEvents();\n\n  var wasStable = false;\n\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; Flase otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function() {\n      if (bodiesCount === 0) return true; // TODO: This will never fire 'stable'\n\n      var lastMove = physicsSimulator.step();\n\n      // Save the movement in case if someone wants to query it in the step\n      // callback.\n      api.lastMove = lastMove;\n\n      // Allow listeners to perform low-level actions after nodes are updated.\n      api.fire('step');\n\n      var ratio = lastMove/bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n\n      if (wasStable !== isStableNow) {\n        wasStable = isStableNow;\n        onStableChanged(isStableNow);\n      }\n\n      return isStableNow;\n    },\n\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function (nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function (nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n      physicsSimulator.invalidateBBox();\n    },\n\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function (linkId) {\n      var spring = springs[linkId];\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function () {\n      return physicsSimulator.getBBox();\n    },\n\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function (node, isPinned) {\n      var body = getInitializedBody(node.id);\n       body.isPinned = !!isPinned;\n    },\n\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function (node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n\n    /**\n     * Request to release all resources\n     */\n    dispose: function() {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is trated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n\n    /**\n     * Gets amount of movement performed during last step opeartion\n     */\n    lastMove: 0\n  };\n\n  eventify(api);\n\n  return api;\n\n  function forEachBody(cb) {\n    Object.keys(nodeBodies).forEach(function(bodyId) {\n      cb(nodeBodies[bodyId], bodyId);\n    });\n  }\n\n  function getSpring(fromId, toId) {\n    var linkId;\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n\n    return springs[linkId];\n  }\n\n  function getBody(nodeId) {\n    return nodeBodies[nodeId];\n  }\n\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n    bodiesCount = graph.getNodesCount();\n  }\n\n  function initPhysics() {\n    bodiesCount = 0;\n\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n\n    graph.forEachLink(initLink);\n  }\n\n  function initBody(nodeId) {\n    var body = nodeBodies[nodeId];\n    if (!body) {\n      var node = graph.getNode(nodeId);\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n\n      var pos = node.position;\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n\n      nodeBodies[nodeId] = body;\n      updateBodyMass(nodeId);\n\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies[nodeId];\n    if (body) {\n      nodeBodies[nodeId] = null;\n      delete nodeBodies[nodeId];\n\n      physicsSimulator.removeBody(body);\n    }\n  }\n\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n\n    var fromBody = nodeBodies[link.fromId],\n        toBody  = nodeBodies[link.toId],\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n\n    springTransform(link, spring);\n\n    springs[link.id] = spring;\n  }\n\n  function releaseLink(link) {\n    var spring = springs[link.id];\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n          to = graph.getNode(link.toId);\n\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n\n      delete springs[link.id];\n\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n    if (!node.links) {\n      return neighbors;\n    }\n    var maxNeighbors = Math.min(node.links.length, 2);\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies[link.fromId] : nodeBodies[link.toId];\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n\n    return neighbors;\n  }\n\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies[nodeId];\n    body.mass = nodeMass(nodeId);\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number')\n    }\n  }\n\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be preconfigured\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n  function isNodeOriginallyPinned(node) {\n    return (node && (node.isPinned || (node.data && node.data.isPinned)));\n  }\n\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies[nodeId];\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies[nodeId];\n    }\n    return body;\n  }\n\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n  function defaultNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n}\n\nfunction noop() { }\n\n},{\"ngraph.events\":12,\"ngraph.physics.simulator\":19}],12:[function(require,module,exports){\narguments[4][9][0].apply(exports,arguments)\n},{\"dup\":9}],13:[function(require,module,exports){\nmodule.exports = load;\n\nvar createGraph = require('ngraph.graph');\n\nfunction load(jsonGraph, nodeTransform, linkTransform) {\n  var stored;\n  nodeTransform = nodeTransform || id;\n  linkTransform = linkTransform || id;\n  if (typeof jsonGraph === 'string') {\n    stored = JSON.parse(jsonGraph);\n  } else {\n    stored = jsonGraph;\n  }\n\n  var graph = createGraph(),\n      i;\n\n  if (stored.links === undefined || stored.nodes === undefined) {\n    throw new Error('Cannot load graph without links and nodes');\n  }\n\n  for (i = 0; i < stored.nodes.length; ++i) {\n    var parsedNode = nodeTransform(stored.nodes[i]);\n    if (!parsedNode.hasOwnProperty('id')) {\n      throw new Error('Graph node format is invalid: Node id is missing');\n    }\n\n    graph.addNode(parsedNode.id, parsedNode.data);\n  }\n\n  for (i = 0; i < stored.links.length; ++i) {\n    var link = linkTransform(stored.links[i]);\n    if (!link.hasOwnProperty('fromId') || !link.hasOwnProperty('toId')) {\n      throw new Error('Graph link format is invalid. Both fromId and toId are required');\n    }\n\n    graph.addLink(link.fromId, link.toId, link.data);\n  }\n\n  return graph;\n}\n\nfunction id(x) { return x; }\n\n},{\"ngraph.graph\":16}],14:[function(require,module,exports){\nvar createGraph = require('ngraph.graph');\n\nmodule.exports = factory(createGraph);\n\n// Allow other developers have their own createGraph\nmodule.exports.factory = factory;\n\nfunction factory(createGraph) {\n  return {\n    ladder: ladder,\n    complete: complete,\n    completeBipartite: completeBipartite,\n    balancedBinTree: balancedBinTree,\n    path: path,\n    circularLadder: circularLadder,\n    grid: grid,\n    grid3: grid3,\n    noLinks: noLinks,\n    wattsStrogatz: wattsStrogatz,\n    cliqueCircle: cliqueCircle\n  };\n\n\n  function ladder(n) {\n  /**\n  * Ladder graph is a graph in form of ladder\n  * @param {Number} n Represents number of steps in the ladder\n  */\n    if (!n || n < 0) {\n      throw new Error(\"Invalid number of nodes\");\n    }\n\n    var g = createGraph(),\n        i;\n\n    for (i = 0; i < n - 1; ++i) {\n      g.addLink(i, i + 1);\n      // first row\n      g.addLink(n + i, n + i + 1);\n      // second row\n      g.addLink(i, n + i);\n      // ladder's step\n    }\n\n    g.addLink(n - 1, 2 * n - 1);\n    // last step in the ladder;\n\n    return g;\n  }\n\n  function circularLadder(n) {\n  /**\n  * Circular ladder with n steps.\n  *\n  * @param {Number} n of steps in the ladder.\n  */\n      if (!n || n < 0) {\n          throw new Error(\"Invalid number of nodes\");\n      }\n\n      var g = ladder(n);\n\n      g.addLink(0, n - 1);\n      g.addLink(n, 2 * n - 1);\n      return g;\n  }\n\n  function complete(n) {\n  /**\n  * Complete graph Kn.\n  *\n  * @param {Number} n represents number of nodes in the complete graph.\n  */\n    if (!n || n < 1) {\n      throw new Error(\"At least two nodes are expected for complete graph\");\n    }\n\n    var g = createGraph(),\n        i,\n        j;\n\n    for (i = 0; i < n; ++i) {\n      for (j = i + 1; j < n; ++j) {\n        if (i !== j) {\n          g.addLink(i, j);\n        }\n      }\n    }\n\n    return g;\n  }\n\n  function completeBipartite (n, m) {\n  /**\n  * Complete bipartite graph K n,m. Each node in the\n  * first partition is connected to all nodes in the second partition.\n  *\n  * @param {Number} n represents number of nodes in the first graph partition\n  * @param {Number} m represents number of nodes in the second graph partition\n  */\n    if (!n || !m || n < 0 || m < 0) {\n      throw new Error(\"Graph dimensions are invalid. Number of nodes in each partition should be greater than 0\");\n    }\n\n    var g = createGraph(),\n        i, j;\n\n    for (i = 0; i < n; ++i) {\n      for (j = n; j < n + m; ++j) {\n        g.addLink(i, j);\n      }\n    }\n\n    return g;\n  }\n\n  function path(n) {\n  /**\n  * Path graph with n steps.\n  *\n  * @param {Number} n number of nodes in the path\n  */\n    if (!n || n < 0) {\n      throw new Error(\"Invalid number of nodes\");\n    }\n\n    var g = createGraph(),\n        i;\n\n    g.addNode(0);\n\n    for (i = 1; i < n; ++i) {\n      g.addLink(i - 1, i);\n    }\n\n    return g;\n  }\n\n\n  function grid(n, m) {\n  /**\n  * Grid graph with n rows and m columns.\n  *\n  * @param {Number} n of rows in the graph.\n  * @param {Number} m of columns in the graph.\n  */\n    if (n < 1 || m < 1) {\n      throw new Error(\"Invalid number of nodes in grid graph\");\n    }\n    var g = createGraph(),\n        i,\n        j;\n    if (n === 1 && m === 1) {\n      g.addNode(0);\n      return g;\n    }\n\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < m; ++j) {\n        var node = i + j * n;\n        if (i > 0) { g.addLink(node, i - 1 + j * n); }\n        if (j > 0) { g.addLink(node, i + (j - 1) * n); }\n      }\n    }\n\n    return g;\n  }\n\n  function grid3(n, m, z) {\n  /**\n  * 3D grid with n rows and m columns and z levels.\n  *\n  * @param {Number} n of rows in the graph.\n  * @param {Number} m of columns in the graph.\n  * @param {Number} z of levels in the graph.\n  */\n    if (n < 1 || m < 1 || z < 1) {\n      throw new Error(\"Invalid number of nodes in grid3 graph\");\n    }\n    var g = createGraph(),\n        i, j, k;\n\n    if (n === 1 && m === 1 && z === 1) {\n      g.addNode(0);\n      return g;\n    }\n\n    for (k = 0; k < z; ++k) {\n      for (i = 0; i < n; ++i) {\n        for (j = 0; j < m; ++j) {\n          var level = k * n * m;\n          var node = i + j * n + level;\n          if (i > 0) { g.addLink(node, i - 1 + j * n + level); }\n          if (j > 0) { g.addLink(node, i + (j - 1) * n + level); }\n          if (k > 0) { g.addLink(node, i + j * n + (k - 1) * n * m ); }\n        }\n      }\n    }\n\n    return g;\n  }\n\n  function balancedBinTree(n) {\n  /**\n  * Balanced binary tree with n levels.\n  *\n  * @param {Number} n of levels in the binary tree\n  */\n    if (n < 0) {\n      throw new Error(\"Invalid number of nodes in balanced tree\");\n    }\n    var g = createGraph(),\n        count = Math.pow(2, n),\n        level;\n\n    if (n === 0) {\n      g.addNode(1);\n    }\n\n    for (level = 1; level < count; ++level) {\n      var root = level,\n        left = root * 2,\n        right = root * 2 + 1;\n\n      g.addLink(root, left);\n      g.addLink(root, right);\n    }\n\n    return g;\n  }\n\n  function noLinks(n) {\n  /**\n  * Graph with no links\n  *\n  * @param {Number} n of nodes in the graph\n  */\n    if (n < 0) {\n      throw new Error(\"Number of nodes should be >= 0\");\n    }\n\n    var g = createGraph(), i;\n    for (i = 0; i < n; ++i) {\n      g.addNode(i);\n    }\n\n    return g;\n  }\n\n  function cliqueCircle(cliqueCount, cliqueSize) {\n  /**\n  * A circular graph with cliques instead of individual nodes\n  *\n  * @param {Number} cliqueCount number of cliques inside circle\n  * @param {Number} cliqueSize number of nodes inside each clique\n  */\n\n    if (cliqueCount < 1) throw new Error('Invalid number of cliqueCount in cliqueCircle');\n    if (cliqueSize < 1) throw new Error('Invalid number of cliqueSize in cliqueCircle');\n\n    var graph = createGraph();\n\n    for (var i = 0; i < cliqueCount; ++i) {\n      appendClique(cliqueSize, i * cliqueSize)\n\n      if (i > 0) {\n        graph.addLink(i * cliqueSize, i * cliqueSize - 1);\n      }\n    }\n    graph.addLink(0, graph.getNodesCount() - 1);\n\n    return graph;\n\n    function appendClique(size, from) {\n      for (var i = 0; i < size; ++i) {\n        graph.addNode(i + from)\n      }\n\n      for (var i = 0; i < size; ++i) {\n        for (var j = i + 1; j < size; ++j) {\n          graph.addLink(i + from, j + from)\n        }\n      }\n    }\n  }\n\n  function wattsStrogatz(n, k, p, seed) {\n  /**\n  * Watts-Strogatz small-world graph.\n  *\n  * @param {Number} n The number of nodes\n  * @param {Number} k Each node is connected to k nearest neighbors in ring topology\n  * @param {Number} p The probability of rewiring each edge\n\n  * @see https://github.com/networkx/networkx/blob/master/networkx/generators/random_graphs.py\n  */\n    if (k >= n) throw new Error('Choose smaller `k`. It cannot be larger than number of nodes `n`');\n\n\n    var random = require('ngraph.random').random(seed || 42);\n\n    var g = createGraph(), i, to;\n    for (i = 0; i < n; ++i) {\n      g.addNode(i);\n    }\n\n    // connect each node to k/2 neighbors\n    var neighborsSize = Math.floor(k/2 + 1);\n    for (var j = 1; j < neighborsSize; ++j) {\n      for (i = 0; i < n; ++i) {\n        to = (j + i) % n;\n        g.addLink(i, to);\n      }\n    }\n\n    // rewire edges from each node\n    // loop over all nodes in order (label) and neighbors in order (distance)\n    // no self loops or multiple edges allowed\n    for (j = 1; j < neighborsSize; ++j) {\n      for (i = 0; i < n; ++i) {\n        if (random.nextDouble() < p) {\n          var from = i;\n          to = (j + i) % n;\n\n          var newTo = random.next(n);\n          var needsRewire = (newTo === from || g.hasLink(from, newTo));\n          if (needsRewire && g.getLinks(from).length === n - 1) {\n            // we cannot rewire this node, it has too many links.\n            continue;\n          }\n          // Enforce no self-loops or multiple edges\n          while (needsRewire) {\n            newTo = random.next(n);\n            needsRewire = (newTo === from || g.hasLink(from, newTo));\n          }\n          var link = g.hasLink(from, to);\n          g.removeLink(link);\n          g.addLink(from, newTo);\n        }\n      }\n    }\n\n    return g;\n  }\n}\n\n},{\"ngraph.graph\":16,\"ngraph.random\":15}],15:[function(require,module,exports){\nmodule.exports = random;\n\n// TODO: Deprecate?\nmodule.exports.random = random,\nmodule.exports.randomIterator = randomIterator\n\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : (+new Date());\n  return new Generator(seed)\n}\n\nfunction Generator(seed) {\n  this.seed = seed;\n}\n\n/**\n  * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n  *\n  * @param maxValue Number REQUIRED. Omitting this number will result in NaN values from PRNG.\n  */\nGenerator.prototype.next = next;\n\n/**\n  * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n  * This function is the same as Math.random() (except that it could be seeded)\n  */\nGenerator.prototype.nextDouble = nextDouble;\n\n/**\n * Returns a random real number uniformly in [0, 1)\n */\nGenerator.prototype.uniform = nextDouble;\n\nGenerator.prototype.gaussian = gaussian;\n\nfunction gaussian() {\n  // use the polar form of the Box-Muller transform\n  // based on https://introcs.cs.princeton.edu/java/23recursion/StdRandom.java\n  var r, x, y;\n  do {\n    x = this.nextDouble() * 2 - 1;\n    y = this.nextDouble() * 2 - 1;\n    r = x * x + y * y;\n  } while (r >= 1 || r === 0);\n\n  return x * Math.sqrt(-2 * Math.log(r)/r);\n}\n\nfunction nextDouble() {\n  var seed = this.seed;\n  // Robert Jenkins' 32 bit integer hash function.\n  seed = ((seed + 0x7ed55d16) + (seed << 12)) & 0xffffffff;\n  seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n  seed = ((seed + 0x165667b1) + (seed << 5)) & 0xffffffff;\n  seed = ((seed + 0xd3a2646c) ^ (seed << 9)) & 0xffffffff;\n  seed = ((seed + 0xfd7046c5) + (seed << 3)) & 0xffffffff;\n  seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n  this.seed = seed;\n  return (seed & 0xfffffff) / 0x10000000;\n}\n\nfunction next(maxValue) {\n  return Math.floor(this.nextDouble() * maxValue);\n}\n\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\nfunction randomIterator(array, customRandom) {\n  var localRandom = customRandom || random();\n  if (typeof localRandom.next !== 'function') {\n    throw new Error('customRandom does not match expected API: next() function is missing');\n  }\n\n  return {\n    forEach: forEach,\n\n    /**\n     * Shuffles array randomly, in place.\n     */\n    shuffle: shuffle\n  };\n\n  function shuffle() {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  function forEach(callback) {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n\n      callback(t);\n    }\n\n    if (array.length) {\n      callback(array[0]);\n    }\n  }\n}\n},{}],16:[function(require,module,exports){\n/**\n * @fileOverview Contains definition of the core graph object.\n */\n\n// TODO: need to change storage layer:\n// 1. Be able to get all nodes O(1)\n// 2. Be able to get number of links O(1)\n\n/**\n * @example\n *  var graph = require('ngraph.graph')();\n *  graph.addNode(1);     // graph has one node.\n *  graph.addLink(2, 3);  // now graph contains three nodes and one link.\n *\n */\nmodule.exports = createGraph;\n\nvar eventify = require('ngraph.events');\n\n/**\n * Creates a new graph\n */\nfunction createGraph(options) {\n  // Graph structure is maintained as dictionary of nodes\n  // and array of links. Each node has 'links' property which\n  // hold all links related to that node. And general links\n  // array is used to speed up all links enumeration. This is inefficient\n  // in terms of memory, but simplifies coding.\n  options = options || {};\n  if ('uniqueLinkId' in options) {\n    console.warn(\n      'ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\\n' +\n      'Use `multigraph` option instead\\n',\n      '\\n',\n      'Note: there is also change in default behavior: From now own each graph\\n'+\n      'is considered to be not a multigraph by default (each edge is unique).'\n    );\n\n    options.multigraph = options.uniqueLinkId;\n  }\n\n  // Dear reader, the non-multigraphs do not guarantee that there is only\n  // one link for a given pair of node. When this option is set to false\n  // we can save some memory and CPU (18% faster for non-multigraph);\n  if (options.multigraph === undefined) options.multigraph = false;\n\n  var nodes = typeof Object.create === 'function' ? Object.create(null) : {},\n    links = [],\n    // Hash of multi-edges. Used to track ids of edges between same nodes\n    multiEdges = {},\n    nodesCount = 0,\n    suspendEvents = 0,\n\n    forEachNode = createNodeIterator(),\n    createLink = options.multigraph ? createUniqueLink : createSingleLink,\n\n    // Our graph API provides means to listen to graph changes. Users can subscribe\n    // to be notified about changes in the graph by using `on` method. However\n    // in some cases they don't use it. To avoid unnecessary memory consumption\n    // we will not record graph changes until we have at least one subscriber.\n    // Code below supports this optimization.\n    //\n    // Accumulates all changes made during graph updates.\n    // Each change element contains:\n    //  changeType - one of the strings: 'add', 'remove' or 'update';\n    //  node - if change is related to node this property is set to changed graph's node;\n    //  link - if change is related to link this property is set to changed graph's link;\n    changes = [],\n    recordLinkChange = noop,\n    recordNodeChange = noop,\n    enterModification = noop,\n    exitModification = noop;\n\n  // this is our public API:\n  var graphPart = {\n    /**\n     * Adds node to the graph. If node with given id already exists in the graph\n     * its data is extended with whatever comes in 'data' argument.\n     *\n     * @param nodeId the node's identifier. A string or number is preferred.\n     * @param [data] additional data for the node being added. If node already\n     *   exists its data object is augmented with the new one.\n     *\n     * @return {node} The newly added node or node with given id if it already exists.\n     */\n    addNode: addNode,\n\n    /**\n     * Adds a link to the graph. The function always create a new\n     * link between two nodes. If one of the nodes does not exists\n     * a new node is created.\n     *\n     * @param fromId link start node id;\n     * @param toId link end node id;\n     * @param [data] additional data to be set on the new link;\n     *\n     * @return {link} The newly created link\n     */\n    addLink: addLink,\n\n    /**\n     * Removes link from the graph. If link does not exist does nothing.\n     *\n     * @param link - object returned by addLink() or getLinks() methods.\n     *\n     * @returns true if link was removed; false otherwise.\n     */\n    removeLink: removeLink,\n\n    /**\n     * Removes node with given id from the graph. If node does not exist in the graph\n     * does nothing.\n     *\n     * @param nodeId node's identifier passed to addNode() function.\n     *\n     * @returns true if node was removed; false otherwise.\n     */\n    removeNode: removeNode,\n\n    /**\n     * Gets node with given identifier. If node does not exist undefined value is returned.\n     *\n     * @param nodeId requested node identifier;\n     *\n     * @return {node} in with requested identifier or undefined if no such node exists.\n     */\n    getNode: getNode,\n\n    /**\n     * Gets number of nodes in this graph.\n     *\n     * @return number of nodes in the graph.\n     */\n    getNodesCount: function () {\n      return nodesCount;\n    },\n\n    /**\n     * Gets total number of links in the graph.\n     */\n    getLinksCount: function () {\n      return links.length;\n    },\n\n    /**\n     * Gets all links (inbound and outbound) from the node with given id.\n     * If node with given id is not found null is returned.\n     *\n     * @param nodeId requested node identifier.\n     *\n     * @return Array of links from and to requested node if such node exists;\n     *   otherwise null is returned.\n     */\n    getLinks: getLinks,\n\n    /**\n     * Invokes callback on each node of the graph.\n     *\n     * @param {Function(node)} callback Function to be invoked. The function\n     *   is passed one argument: visited node.\n     */\n    forEachNode: forEachNode,\n\n    /**\n     * Invokes callback on every linked (adjacent) node to the given one.\n     *\n     * @param nodeId Identifier of the requested node.\n     * @param {Function(node, link)} callback Function to be called on all linked nodes.\n     *   The function is passed two parameters: adjacent node and link object itself.\n     * @param oriented if true graph treated as oriented.\n     */\n    forEachLinkedNode: forEachLinkedNode,\n\n    /**\n     * Enumerates all links in the graph\n     *\n     * @param {Function(link)} callback Function to be called on all links in the graph.\n     *   The function is passed one parameter: graph's link object.\n     *\n     * Link object contains at least the following fields:\n     *  fromId - node id where link starts;\n     *  toId - node id where link ends,\n     *  data - additional data passed to graph.addLink() method.\n     */\n    forEachLink: forEachLink,\n\n    /**\n     * Suspend all notifications about graph changes until\n     * endUpdate is called.\n     */\n    beginUpdate: enterModification,\n\n    /**\n     * Resumes all notifications about graph changes and fires\n     * graph 'changed' event in case there are any pending changes.\n     */\n    endUpdate: exitModification,\n\n    /**\n     * Removes all nodes and links from the graph.\n     */\n    clear: clear,\n\n    /**\n     * Detects whether there is a link between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     * NOTE: this function is synonim for getLink()\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    hasLink: getLink,\n\n    /**\n     * Detects whether there is a node with given id\n     * \n     * Operation complexity is O(1)\n     * NOTE: this function is synonim for getNode()\n     *\n     * @returns node if there is one; Falsy value otherwise.\n     */\n    hasNode: getNode,\n\n    /**\n     * Gets an edge between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     *\n     * @param {string} fromId link start identifier\n     * @param {string} toId link end identifier\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    getLink: getLink\n  };\n\n  // this will add `on()` and `fire()` methods.\n  eventify(graphPart);\n\n  monitorSubscribers();\n\n  return graphPart;\n\n  function monitorSubscribers() {\n    var realOn = graphPart.on;\n\n    // replace real `on` with our temporary on, which will trigger change\n    // modification monitoring:\n    graphPart.on = on;\n\n    function on() {\n      // now it's time to start tracking stuff:\n      graphPart.beginUpdate = enterModification = enterModificationReal;\n      graphPart.endUpdate = exitModification = exitModificationReal;\n      recordLinkChange = recordLinkChangeReal;\n      recordNodeChange = recordNodeChangeReal;\n\n      // this will replace current `on` method with real pub/sub from `eventify`.\n      graphPart.on = realOn;\n      // delegate to real `on` handler:\n      return realOn.apply(graphPart, arguments);\n    }\n  }\n\n  function recordLinkChangeReal(link, changeType) {\n    changes.push({\n      link: link,\n      changeType: changeType\n    });\n  }\n\n  function recordNodeChangeReal(node, changeType) {\n    changes.push({\n      node: node,\n      changeType: changeType\n    });\n  }\n\n  function addNode(nodeId, data) {\n    if (nodeId === undefined) {\n      throw new Error('Invalid node identifier');\n    }\n\n    enterModification();\n\n    var node = getNode(nodeId);\n    if (!node) {\n      node = new Node(nodeId, data);\n      nodesCount++;\n      recordNodeChange(node, 'add');\n    } else {\n      node.data = data;\n      recordNodeChange(node, 'update');\n    }\n\n    nodes[nodeId] = node;\n\n    exitModification();\n    return node;\n  }\n\n  function getNode(nodeId) {\n    return nodes[nodeId];\n  }\n\n  function removeNode(nodeId) {\n    var node = getNode(nodeId);\n    if (!node) {\n      return false;\n    }\n\n    enterModification();\n\n    var prevLinks = node.links;\n    if (prevLinks) {\n      node.links = null;\n      for(var i = 0; i < prevLinks.length; ++i) {\n        removeLink(prevLinks[i]);\n      }\n    }\n\n    delete nodes[nodeId];\n    nodesCount--;\n\n    recordNodeChange(node, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n\n  function addLink(fromId, toId, data) {\n    enterModification();\n\n    var fromNode = getNode(fromId) || addNode(fromId);\n    var toNode = getNode(toId) || addNode(toId);\n\n    var link = createLink(fromId, toId, data);\n\n    links.push(link);\n\n    // TODO: this is not cool. On large graphs potentially would consume more memory.\n    addLinkToNode(fromNode, link);\n    if (fromId !== toId) {\n      // make sure we are not duplicating links for self-loops\n      addLinkToNode(toNode, link);\n    }\n\n    recordLinkChange(link, 'add');\n\n    exitModification();\n\n    return link;\n  }\n\n  function createSingleLink(fromId, toId, data) {\n    var linkId = makeLinkId(fromId, toId);\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function createUniqueLink(fromId, toId, data) {\n    // TODO: Get rid of this method.\n    var linkId = makeLinkId(fromId, toId);\n    var isMultiEdge = multiEdges.hasOwnProperty(linkId);\n    if (isMultiEdge || getLink(fromId, toId)) {\n      if (!isMultiEdge) {\n        multiEdges[linkId] = 0;\n      }\n      var suffix = '@' + (++multiEdges[linkId]);\n      linkId = makeLinkId(fromId + suffix, toId + suffix);\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function getLinks(nodeId) {\n    var node = getNode(nodeId);\n    return node ? node.links : null;\n  }\n\n  function removeLink(link) {\n    if (!link) {\n      return false;\n    }\n    var idx = indexOfElementInArray(link, links);\n    if (idx < 0) {\n      return false;\n    }\n\n    enterModification();\n\n    links.splice(idx, 1);\n\n    var fromNode = getNode(link.fromId);\n    var toNode = getNode(link.toId);\n\n    if (fromNode) {\n      idx = indexOfElementInArray(link, fromNode.links);\n      if (idx >= 0) {\n        fromNode.links.splice(idx, 1);\n      }\n    }\n\n    if (toNode) {\n      idx = indexOfElementInArray(link, toNode.links);\n      if (idx >= 0) {\n        toNode.links.splice(idx, 1);\n      }\n    }\n\n    recordLinkChange(link, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n  function getLink(fromNodeId, toNodeId) {\n    // TODO: Use sorted links to speed this up\n    var node = getNode(fromNodeId),\n      i;\n    if (!node || !node.links) {\n      return null;\n    }\n\n    for (i = 0; i < node.links.length; ++i) {\n      var link = node.links[i];\n      if (link.fromId === fromNodeId && link.toId === toNodeId) {\n        return link;\n      }\n    }\n\n    return null; // no link.\n  }\n\n  function clear() {\n    enterModification();\n    forEachNode(function(node) {\n      removeNode(node.id);\n    });\n    exitModification();\n  }\n\n  function forEachLink(callback) {\n    var i, length;\n    if (typeof callback === 'function') {\n      for (i = 0, length = links.length; i < length; ++i) {\n        callback(links[i]);\n      }\n    }\n  }\n\n  function forEachLinkedNode(nodeId, callback, oriented) {\n    var node = getNode(nodeId);\n\n    if (node && node.links && typeof callback === 'function') {\n      if (oriented) {\n        return forEachOrientedLink(node.links, nodeId, callback);\n      } else {\n        return forEachNonOrientedLink(node.links, nodeId, callback);\n      }\n    }\n  }\n\n  function forEachNonOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    for (var i = 0; i < links.length; ++i) {\n      var link = links[i];\n      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;\n\n      quitFast = callback(nodes[linkedNodeId], link);\n      if (quitFast) {\n        return true; // Client does not need more iterations. Break now.\n      }\n    }\n  }\n\n  function forEachOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    for (var i = 0; i < links.length; ++i) {\n      var link = links[i];\n      if (link.fromId === nodeId) {\n        quitFast = callback(nodes[link.toId], link);\n        if (quitFast) {\n          return true; // Client does not need more iterations. Break now.\n        }\n      }\n    }\n  }\n\n  // we will not fire anything until users of this library explicitly call `on()`\n  // method.\n  function noop() {}\n\n  // Enter, Exit modification allows bulk graph updates without firing events.\n  function enterModificationReal() {\n    suspendEvents += 1;\n  }\n\n  function exitModificationReal() {\n    suspendEvents -= 1;\n    if (suspendEvents === 0 && changes.length > 0) {\n      graphPart.fire('changed', changes);\n      changes.length = 0;\n    }\n  }\n\n  function createNodeIterator() {\n    // Object.keys iterator is 1.3x faster than `for in` loop.\n    // See `https://github.com/anvaka/ngraph.graph/tree/bench-for-in-vs-obj-keys`\n    // branch for perf test\n    return Object.keys ? objectKeysIterator : forInIterator;\n  }\n\n  function objectKeysIterator(callback) {\n    if (typeof callback !== 'function') {\n      return;\n    }\n\n    var keys = Object.keys(nodes);\n    for (var i = 0; i < keys.length; ++i) {\n      if (callback(nodes[keys[i]])) {\n        return true; // client doesn't want to proceed. Return.\n      }\n    }\n  }\n\n  function forInIterator(callback) {\n    if (typeof callback !== 'function') {\n      return;\n    }\n    var node;\n\n    for (node in nodes) {\n      if (callback(nodes[node])) {\n        return true; // client doesn't want to proceed. Return.\n      }\n    }\n  }\n}\n\n// need this for old browsers. Should this be a separate module?\nfunction indexOfElementInArray(element, array) {\n  if (!array) return -1;\n\n  if (array.indexOf) {\n    return array.indexOf(element);\n  }\n\n  var len = array.length,\n    i;\n\n  for (i = 0; i < len; i += 1) {\n    if (array[i] === element) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Internal structure to represent node;\n */\nfunction Node(id, data) {\n  this.id = id;\n  this.links = null;\n  this.data = data;\n}\n\nfunction addLinkToNode(node, link) {\n  if (node.links) {\n    node.links.push(link);\n  } else {\n    node.links = [link];\n  }\n}\n\n/**\n * Internal structure to represent links;\n */\nfunction Link(fromId, toId, data, id) {\n  this.fromId = fromId;\n  this.toId = toId;\n  this.data = data;\n  this.id = id;\n}\n\nfunction hashCode(str) {\n  var hash = 0, i, chr, len;\n  if (str.length == 0) return hash;\n  for (i = 0, len = str.length; i < len; i++) {\n    chr   = str.charCodeAt(i);\n    hash  = ((hash << 5) - hash) + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n  return hash;\n}\n\nfunction makeLinkId(fromId, toId) {\n  return fromId.toString() + '👉 ' + toId.toString();\n}\n\n},{\"ngraph.events\":9}],17:[function(require,module,exports){\nmodule.exports = merge;\n\n/**\n * Augments `target` with properties in `options`. Does not override\n * target's properties if they are defined and matches expected type in \n * options\n *\n * @returns {Object} merged object\n */\nfunction merge(target, options) {\n  var key;\n  if (!target) { target = {}; }\n  if (options) {\n    for (key in options) {\n      if (options.hasOwnProperty(key)) {\n        var targetHasIt = target.hasOwnProperty(key),\n            optionsValueType = typeof options[key],\n            shouldReplace = !targetHasIt || (typeof target[key] !== optionsValueType);\n\n        if (shouldReplace) {\n          target[key] = options[key];\n        } else if (optionsValueType === 'object') {\n          // go deep, don't care about loops here, we are simple API!:\n          target[key] = merge(target[key], options[key]);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\n},{}],18:[function(require,module,exports){\nmodule.exports = {\n  Body: Body,\n  Vector2d: Vector2d,\n  Body3d: Body3d,\n  Vector3d: Vector3d\n};\n\nfunction Body(x, y) {\n  this.pos = new Vector2d(x, y);\n  this.prevPos = new Vector2d(x, y);\n  this.force = new Vector2d();\n  this.velocity = new Vector2d();\n  this.mass = 1;\n}\n\nBody.prototype.setPosition = function (x, y) {\n  this.prevPos.x = this.pos.x = x;\n  this.prevPos.y = this.pos.y = y;\n};\n\nfunction Vector2d(x, y) {\n  if (x && typeof x !== 'number') {\n    // could be another vector\n    this.x = typeof x.x === 'number' ? x.x : 0;\n    this.y = typeof x.y === 'number' ? x.y : 0;\n  } else {\n    this.x = typeof x === 'number' ? x : 0;\n    this.y = typeof y === 'number' ? y : 0;\n  }\n}\n\nVector2d.prototype.reset = function () {\n  this.x = this.y = 0;\n};\n\nfunction Body3d(x, y, z) {\n  this.pos = new Vector3d(x, y, z);\n  this.prevPos = new Vector3d(x, y, z);\n  this.force = new Vector3d();\n  this.velocity = new Vector3d();\n  this.mass = 1;\n}\n\nBody3d.prototype.setPosition = function (x, y, z) {\n  this.prevPos.x = this.pos.x = x;\n  this.prevPos.y = this.pos.y = y;\n  this.prevPos.z = this.pos.z = z;\n};\n\nfunction Vector3d(x, y, z) {\n  if (x && typeof x !== 'number') {\n    // could be another vector\n    this.x = typeof x.x === 'number' ? x.x : 0;\n    this.y = typeof x.y === 'number' ? x.y : 0;\n    this.z = typeof x.z === 'number' ? x.z : 0;\n  } else {\n    this.x = typeof x === 'number' ? x : 0;\n    this.y = typeof y === 'number' ? y : 0;\n    this.z = typeof z === 'number' ? z : 0;\n  }\n};\n\nVector3d.prototype.reset = function () {\n  this.x = this.y = this.z = 0;\n};\n\n},{}],19:[function(require,module,exports){\n/**\n * Manages a simulation of physical forces acting on bodies and springs.\n */\nmodule.exports = physicsSimulator;\n\nfunction physicsSimulator(settings) {\n  var Spring = require('./lib/spring');\n  var expose = require('ngraph.expose');\n  var merge = require('ngraph.merge');\n  var eventify = require('ngraph.events');\n\n  settings = merge(settings, {\n      /**\n       * Ideal length for links (springs in physical model).\n       */\n      springLength: 30,\n\n      /**\n       * Hook's law coefficient. 1 - solid spring.\n       */\n      springCoeff: 0.0008,\n\n      /**\n       * Coulomb's law coefficient. It's used to repel nodes thus should be negative\n       * if you make it positive nodes start attract each other :).\n       */\n      gravity: -1.2,\n\n      /**\n       * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\n       * The closer it's to 1 the more nodes algorithm will have to go through.\n       * Setting it to one makes Barnes Hut simulation no different from\n       * brute-force forces calculation (each node is considered).\n       */\n      theta: 0.8,\n\n      /**\n       * Drag force coefficient. Used to slow down system, thus should be less than 1.\n       * The closer it is to 0 the less tight system will be.\n       */\n      dragCoeff: 0.02,\n\n      /**\n       * Default time step (dt) for forces integration\n       */\n      timeStep : 20,\n  });\n\n  // We allow clients to override basic factory methods:\n  var createQuadTree = settings.createQuadTree || require('ngraph.quadtreebh');\n  var createBounds = settings.createBounds || require('./lib/bounds');\n  var createDragForce = settings.createDragForce || require('./lib/dragForce');\n  var createSpringForce = settings.createSpringForce || require('./lib/springForce');\n  var integrate = settings.integrator || require('./lib/eulerIntegrator');\n  var createBody = settings.createBody || require('./lib/createBody');\n\n  var bodies = [], // Bodies in this simulation.\n      springs = [], // Springs in this simulation.\n      quadTree =  createQuadTree(settings),\n      bounds = createBounds(bodies, settings),\n      springForce = createSpringForce(settings),\n      dragForce = createDragForce(settings);\n\n  var bboxNeedsUpdate = true;\n  var totalMovement = 0; // how much movement we made on last step\n\n  var publicApi = {\n    /**\n     * Array of bodies, registered with current simulator\n     *\n     * Note: To add new body, use addBody() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    bodies: bodies,\n\n    quadTree: quadTree,\n\n    /**\n     * Array of springs, registered with current simulator\n     *\n     * Note: To add new spring, use addSpring() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    springs: springs,\n\n    /**\n     * Returns settings with which current simulator was initialized\n     */\n    settings: settings,\n\n    /**\n     * Performs one step of force simulation.\n     *\n     * @returns {boolean} true if system is considered stable; False otherwise.\n     */\n    step: function () {\n      accumulateForces();\n\n      var movement = integrate(bodies, settings.timeStep);\n      bounds.update();\n\n      return movement;\n    },\n\n    /**\n     * Adds body to the system\n     *\n     * @param {ngraph.physics.primitives.Body} body physical body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBody: function (body) {\n      if (!body) {\n        throw new Error('Body is required');\n      }\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Adds body to the system at given position\n     *\n     * @param {Object} pos position of a body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBodyAt: function (pos) {\n      if (!pos) {\n        throw new Error('Body position is required');\n      }\n      var body = createBody(pos);\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Removes body from the system\n     *\n     * @param {ngraph.physics.primitives.Body} body to remove\n     *\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\n     */\n    removeBody: function (body) {\n      if (!body) { return; }\n\n      var idx = bodies.indexOf(body);\n      if (idx < 0) { return; }\n\n      bodies.splice(idx, 1);\n      if (bodies.length === 0) {\n        bounds.reset();\n      }\n      return true;\n    },\n\n    /**\n     * Adds a spring to this simulation.\n     *\n     * @returns {Object} - a handle for a spring. If you want to later remove\n     * spring pass it to removeSpring() method.\n     */\n    addSpring: function (body1, body2, springLength, springWeight, springCoefficient) {\n      if (!body1 || !body2) {\n        throw new Error('Cannot add null spring to force simulator');\n      }\n\n      if (typeof springLength !== 'number') {\n        springLength = -1; // assume global configuration\n      }\n\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1, springWeight);\n      springs.push(spring);\n\n      // TODO: could mark simulator as dirty.\n      return spring;\n    },\n\n    /**\n     * Returns amount of movement performed on last step() call\n     */\n    getTotalMovement: function () {\n      return totalMovement;\n    },\n\n    /**\n     * Removes spring from the system\n     *\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\n     *\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\n     */\n    removeSpring: function (spring) {\n      if (!spring) { return; }\n      var idx = springs.indexOf(spring);\n      if (idx > -1) {\n        springs.splice(idx, 1);\n        return true;\n      }\n    },\n\n    getBestNewBodyPosition: function (neighbors) {\n      return bounds.getBestNewPosition(neighbors);\n    },\n\n    /**\n     * Returns bounding box which covers all bodies\n     */\n    getBBox: function () {\n      if (bboxNeedsUpdate) {\n        bounds.update();\n        bboxNeedsUpdate = false;\n      }\n      return bounds.box;\n    },\n\n    invalidateBBox: function () {\n      bboxNeedsUpdate = true;\n    },\n\n    gravity: function (value) {\n      if (value !== undefined) {\n        settings.gravity = value;\n        quadTree.options({gravity: value});\n        return this;\n      } else {\n        return settings.gravity;\n      }\n    },\n\n    theta: function (value) {\n      if (value !== undefined) {\n        settings.theta = value;\n        quadTree.options({theta: value});\n        return this;\n      } else {\n        return settings.theta;\n      }\n    }\n  };\n\n  // allow settings modification via public API:\n  expose(settings, publicApi);\n\n  eventify(publicApi);\n\n  return publicApi;\n\n  function accumulateForces() {\n    // Accumulate forces acting on bodies.\n    var body,\n        i = bodies.length;\n\n    if (i) {\n      // only add bodies if there the array is not empty:\n      quadTree.insertBodies(bodies); // performance: O(n * log n)\n      while (i--) {\n        body = bodies[i];\n        // If body is pinned there is no point updating its forces - it should\n        // never move:\n        if (!body.isPinned) {\n          body.force.reset();\n\n          quadTree.updateBodyForce(body);\n          dragForce.update(body);\n        }\n      }\n    }\n\n    i = springs.length;\n    while(i--) {\n      springForce.update(springs[i]);\n    }\n  }\n};\n\n},{\"./lib/bounds\":20,\"./lib/createBody\":21,\"./lib/dragForce\":22,\"./lib/eulerIntegrator\":23,\"./lib/spring\":24,\"./lib/springForce\":25,\"ngraph.events\":9,\"ngraph.expose\":10,\"ngraph.merge\":17,\"ngraph.quadtreebh\":26}],20:[function(require,module,exports){\nmodule.exports = function (bodies, settings) {\n  var random = require('ngraph.random').random(42);\n  var boundingBox =  { x1: 0, y1: 0, x2: 0, y2: 0 };\n\n  return {\n    box: boundingBox,\n\n    update: updateBoundingBox,\n\n    reset : function () {\n      boundingBox.x1 = boundingBox.y1 = 0;\n      boundingBox.x2 = boundingBox.y2 = 0;\n    },\n\n    getBestNewPosition: function (neighbors) {\n      var graphRect = boundingBox;\n\n      var baseX = 0, baseY = 0;\n\n      if (neighbors.length) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          baseX += neighbors[i].pos.x;\n          baseY += neighbors[i].pos.y;\n        }\n\n        baseX /= neighbors.length;\n        baseY /= neighbors.length;\n      } else {\n        baseX = (graphRect.x1 + graphRect.x2) / 2;\n        baseY = (graphRect.y1 + graphRect.y2) / 2;\n      }\n\n      var springLength = settings.springLength;\n      return {\n        x: baseX + random.next(springLength) - springLength / 2,\n        y: baseY + random.next(springLength) - springLength / 2\n      };\n    }\n  };\n\n  function updateBoundingBox() {\n    var i = bodies.length;\n    if (i === 0) { return; } // don't have to wory here.\n\n    var x1 = Number.MAX_VALUE,\n        y1 = Number.MAX_VALUE,\n        x2 = Number.MIN_VALUE,\n        y2 = Number.MIN_VALUE;\n\n    while(i--) {\n      // this is O(n), could it be done faster with quadtree?\n      // how about pinned nodes?\n      var body = bodies[i];\n      if (body.isPinned) {\n        body.pos.x = body.prevPos.x;\n        body.pos.y = body.prevPos.y;\n      } else {\n        body.prevPos.x = body.pos.x;\n        body.prevPos.y = body.pos.y;\n      }\n      if (body.pos.x < x1) {\n        x1 = body.pos.x;\n      }\n      if (body.pos.x > x2) {\n        x2 = body.pos.x;\n      }\n      if (body.pos.y < y1) {\n        y1 = body.pos.y;\n      }\n      if (body.pos.y > y2) {\n        y2 = body.pos.y;\n      }\n    }\n\n    boundingBox.x1 = x1;\n    boundingBox.x2 = x2;\n    boundingBox.y1 = y1;\n    boundingBox.y2 = y2;\n  }\n}\n\n},{\"ngraph.random\":30}],21:[function(require,module,exports){\nvar physics = require('ngraph.physics.primitives');\n\nmodule.exports = function(pos) {\n  return new physics.Body(pos);\n}\n\n},{\"ngraph.physics.primitives\":18}],22:[function(require,module,exports){\n/**\n * Represents drag force, which reduces force value on each step by given\n * coefficient.\n *\n * @param {Object} options for the drag force\n * @param {Number=} options.dragCoeff drag force coefficient. 0.1 by default\n */\nmodule.exports = function (options) {\n  var merge = require('ngraph.merge'),\n      expose = require('ngraph.expose');\n\n  options = merge(options, {\n    dragCoeff: 0.02\n  });\n\n  var api = {\n    update : function (body) {\n      body.force.x -= options.dragCoeff * body.velocity.x;\n      body.force.y -= options.dragCoeff * body.velocity.y;\n    }\n  };\n\n  // let easy access to dragCoeff:\n  expose(options, api, ['dragCoeff']);\n\n  return api;\n};\n\n},{\"ngraph.expose\":10,\"ngraph.merge\":17}],23:[function(require,module,exports){\n/**\n * Performs forces integration, using given timestep. Uses Euler method to solve\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\n *\n * @returns {Number} squared distance of total position updates.\n */\n\nmodule.exports = integrate;\n\nfunction integrate(bodies, timeStep) {\n  var dx = 0, tx = 0,\n      dy = 0, ty = 0,\n      i,\n      max = bodies.length;\n\n  if (max === 0) {\n    return 0;\n  }\n\n  for (i = 0; i < max; ++i) {\n    var body = bodies[i],\n        coeff = timeStep / body.mass;\n\n    body.velocity.x += coeff * body.force.x;\n    body.velocity.y += coeff * body.force.y;\n    var vx = body.velocity.x,\n        vy = body.velocity.y,\n        v = Math.sqrt(vx * vx + vy * vy);\n\n    if (v > 1) {\n      body.velocity.x = vx / v;\n      body.velocity.y = vy / v;\n    }\n\n    dx = timeStep * body.velocity.x;\n    dy = timeStep * body.velocity.y;\n\n    body.pos.x += dx;\n    body.pos.y += dy;\n\n    tx += Math.abs(dx); ty += Math.abs(dy);\n  }\n\n  return (tx * tx + ty * ty)/max;\n}\n\n},{}],24:[function(require,module,exports){\nmodule.exports = Spring;\n\n/**\n * Represents a physical spring. Spring connects two bodies, has rest length\n * stiffness coefficient and optional weight\n */\nfunction Spring(fromBody, toBody, length, coeff, weight) {\n    this.from = fromBody;\n    this.to = toBody;\n    this.length = length;\n    this.coeff = coeff;\n\n    this.weight = typeof weight === 'number' ? weight : 1;\n};\n\n},{}],25:[function(require,module,exports){\n/**\n * Represents spring force, which updates forces acting on two bodies, conntected\n * by a spring.\n *\n * @param {Object} options for the spring force\n * @param {Number=} options.springCoeff spring force coefficient.\n * @param {Number=} options.springLength desired length of a spring at rest.\n */\nmodule.exports = function (options) {\n  var merge = require('ngraph.merge');\n  var random = require('ngraph.random').random(42);\n  var expose = require('ngraph.expose');\n\n  options = merge(options, {\n    springCoeff: 0.0002,\n    springLength: 80\n  });\n\n  var api = {\n    /**\n     * Upsates forces acting on a spring\n     */\n    update : function (spring) {\n      var body1 = spring.from,\n          body2 = spring.to,\n          length = spring.length < 0 ? options.springLength : spring.length,\n          dx = body2.pos.x - body1.pos.x,\n          dy = body2.pos.y - body1.pos.y,\n          r = Math.sqrt(dx * dx + dy * dy);\n\n      if (r === 0) {\n          dx = (random.nextDouble() - 0.5) / 50;\n          dy = (random.nextDouble() - 0.5) / 50;\n          r = Math.sqrt(dx * dx + dy * dy);\n      }\n\n      var d = r - length;\n      var coeff = ((!spring.coeff || spring.coeff < 0) ? options.springCoeff : spring.coeff) * d / r * spring.weight;\n\n      body1.force.x += coeff * dx;\n      body1.force.y += coeff * dy;\n\n      body2.force.x -= coeff * dx;\n      body2.force.y -= coeff * dy;\n    }\n  };\n\n  expose(options, api, ['springCoeff', 'springLength']);\n  return api;\n}\n\n},{\"ngraph.expose\":10,\"ngraph.merge\":17,\"ngraph.random\":30}],26:[function(require,module,exports){\n/**\n * This is Barnes Hut simulation algorithm for 2d case. Implementation\n * is highly optimized (avoids recusion and gc pressure)\n *\n * http://www.cs.princeton.edu/courses/archive/fall03/cs126/assignments/barnes-hut.html\n */\n\nmodule.exports = function(options) {\n  options = options || {};\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\n\n  // we require deterministic randomness here\n  var random = require('ngraph.random').random(1984),\n    Node = require('./node'),\n    InsertStack = require('./insertStack'),\n    isSamePosition = require('./isSamePosition');\n\n  var gravity = options.gravity,\n    updateQueue = [],\n    insertStack = new InsertStack(),\n    theta = options.theta,\n\n    nodesCache = [],\n    currentInCache = 0,\n    root = newNode();\n\n  return {\n    insertBodies: insertBodies,\n    /**\n     * Gets root node if its present\n     */\n    getRoot: function() {\n      return root;\n    },\n    updateBodyForce: update,\n    options: function(newOptions) {\n      if (newOptions) {\n        if (typeof newOptions.gravity === 'number') {\n          gravity = newOptions.gravity;\n        }\n        if (typeof newOptions.theta === 'number') {\n          theta = newOptions.theta;\n        }\n\n        return this;\n      }\n\n      return {\n        gravity: gravity,\n        theta: theta\n      };\n    }\n  };\n\n  function newNode() {\n    // To avoid pressure on GC we reuse nodes.\n    var node = nodesCache[currentInCache];\n    if (node) {\n      node.quad0 = null;\n      node.quad1 = null;\n      node.quad2 = null;\n      node.quad3 = null;\n      node.body = null;\n      node.mass = node.massX = node.massY = 0;\n      node.left = node.right = node.top = node.bottom = 0;\n    } else {\n      node = new Node();\n      nodesCache[currentInCache] = node;\n    }\n\n    ++currentInCache;\n    return node;\n  }\n\n  function update(sourceBody) {\n    var queue = updateQueue,\n      v,\n      dx,\n      dy,\n      r, fx = 0,\n      fy = 0,\n      queueLength = 1,\n      shiftIdx = 0,\n      pushIdx = 1;\n\n    queue[0] = root;\n\n    while (queueLength) {\n      var node = queue[shiftIdx],\n        body = node.body;\n\n      queueLength -= 1;\n      shiftIdx += 1;\n      var differentBody = (body !== sourceBody);\n      if (body && differentBody) {\n        // If the current node is a leaf node (and it is not source body),\n        // calculate the force exerted by the current node on body, and add this\n        // amount to body's net force.\n        dx = body.pos.x - sourceBody.pos.x;\n        dy = body.pos.y - sourceBody.pos.y;\n        r = Math.sqrt(dx * dx + dy * dy);\n\n        if (r === 0) {\n          // Poor man's protection against zero distance.\n          dx = (random.nextDouble() - 0.5) / 50;\n          dy = (random.nextDouble() - 0.5) / 50;\n          r = Math.sqrt(dx * dx + dy * dy);\n        }\n\n        // This is standard gravition force calculation but we divide\n        // by r^3 to save two operations when normalizing force vector.\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\n        fx += v * dx;\n        fy += v * dy;\n      } else if (differentBody) {\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\n        // represented by the internal node, and r is the distance between the body\n        // and the node's center-of-mass\n        dx = node.massX / node.mass - sourceBody.pos.x;\n        dy = node.massY / node.mass - sourceBody.pos.y;\n        r = Math.sqrt(dx * dx + dy * dy);\n\n        if (r === 0) {\n          // Sorry about code duplucation. I don't want to create many functions\n          // right away. Just want to see performance first.\n          dx = (random.nextDouble() - 0.5) / 50;\n          dy = (random.nextDouble() - 0.5) / 50;\n          r = Math.sqrt(dx * dx + dy * dy);\n        }\n        // If s / r < θ, treat this internal node as a single body, and calculate the\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\n        if ((node.right - node.left) / r < theta) {\n          // in the if statement above we consider node's width only\n          // because the region was squarified during tree creation.\n          // Thus there is no difference between using width or height.\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\n          fx += v * dx;\n          fy += v * dy;\n        } else {\n          // Otherwise, run the procedure recursively on each of the current node's children.\n\n          // I intentionally unfolded this loop, to save several CPU cycles.\n          if (node.quad0) {\n            queue[pushIdx] = node.quad0;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n          if (node.quad1) {\n            queue[pushIdx] = node.quad1;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n          if (node.quad2) {\n            queue[pushIdx] = node.quad2;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n          if (node.quad3) {\n            queue[pushIdx] = node.quad3;\n            queueLength += 1;\n            pushIdx += 1;\n          }\n        }\n      }\n    }\n\n    sourceBody.force.x += fx;\n    sourceBody.force.y += fy;\n  }\n\n  function insertBodies(bodies) {\n    var x1 = Number.MAX_VALUE,\n      y1 = Number.MAX_VALUE,\n      x2 = Number.MIN_VALUE,\n      y2 = Number.MIN_VALUE,\n      i,\n      max = bodies.length;\n\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\n    i = max;\n    while (i--) {\n      var x = bodies[i].pos.x;\n      var y = bodies[i].pos.y;\n      if (x < x1) {\n        x1 = x;\n      }\n      if (x > x2) {\n        x2 = x;\n      }\n      if (y < y1) {\n        y1 = y;\n      }\n      if (y > y2) {\n        y2 = y;\n      }\n    }\n\n    // Squarify the bounds.\n    var dx = x2 - x1,\n      dy = y2 - y1;\n    if (dx > dy) {\n      y2 = y1 + dx;\n    } else {\n      x2 = x1 + dy;\n    }\n\n    currentInCache = 0;\n    root = newNode();\n    root.left = x1;\n    root.right = x2;\n    root.top = y1;\n    root.bottom = y2;\n\n    i = max - 1;\n    if (i >= 0) {\n      root.body = bodies[i];\n    }\n    while (i--) {\n      insert(bodies[i], root);\n    }\n  }\n\n  function insert(newBody) {\n    insertStack.reset();\n    insertStack.push(root, newBody);\n\n    while (!insertStack.isEmpty()) {\n      var stackItem = insertStack.pop(),\n        node = stackItem.node,\n        body = stackItem.body;\n\n      if (!node.body) {\n        // This is internal node. Update the total mass of the node and center-of-mass.\n        var x = body.pos.x;\n        var y = body.pos.y;\n        node.mass = node.mass + body.mass;\n        node.massX = node.massX + body.mass * x;\n        node.massY = node.massY + body.mass * y;\n\n        // Recursively insert the body in the appropriate quadrant.\n        // But first find the appropriate quadrant.\n        var quadIdx = 0, // Assume we are in the 0's quad.\n          left = node.left,\n          right = (node.right + left) / 2,\n          top = node.top,\n          bottom = (node.bottom + top) / 2;\n\n        if (x > right) { // somewhere in the eastern part.\n          quadIdx = quadIdx + 1;\n          left = right;\n          right = node.right;\n        }\n        if (y > bottom) { // and in south.\n          quadIdx = quadIdx + 2;\n          top = bottom;\n          bottom = node.bottom;\n        }\n\n        var child = getChild(node, quadIdx);\n        if (!child) {\n          // The node is internal but this quadrant is not taken. Add\n          // subnode to it.\n          child = newNode();\n          child.left = left;\n          child.top = top;\n          child.right = right;\n          child.bottom = bottom;\n          child.body = body;\n\n          setChild(node, quadIdx, child);\n        } else {\n          // continue searching in this quadrant.\n          insertStack.push(child, body);\n        }\n      } else {\n        // We are trying to add to the leaf node.\n        // We have to convert current leaf into internal node\n        // and continue adding two nodes.\n        var oldBody = node.body;\n        node.body = null; // internal nodes do not cary bodies\n\n        if (isSamePosition(oldBody.pos, body.pos)) {\n          // Prevent infinite subdivision by bumping one node\n          // anywhere in this quadrant\n          var retriesCount = 3;\n          do {\n            var offset = random.nextDouble();\n            var dx = (node.right - node.left) * offset;\n            var dy = (node.bottom - node.top) * offset;\n\n            oldBody.pos.x = node.left + dx;\n            oldBody.pos.y = node.top + dy;\n            retriesCount -= 1;\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\n\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\n            // This is very bad, we ran out of precision.\n            // if we do not return from the method we'll get into\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\n            // Next layout iteration should get larger bounding box in the first step and fix this\n            return;\n          }\n        }\n        // Next iteration should subdivide node further.\n        insertStack.push(node, oldBody);\n        insertStack.push(node, body);\n      }\n    }\n  }\n};\n\nfunction getChild(node, idx) {\n  if (idx === 0) return node.quad0;\n  if (idx === 1) return node.quad1;\n  if (idx === 2) return node.quad2;\n  if (idx === 3) return node.quad3;\n  return null;\n}\n\nfunction setChild(node, idx, child) {\n  if (idx === 0) node.quad0 = child;\n  else if (idx === 1) node.quad1 = child;\n  else if (idx === 2) node.quad2 = child;\n  else if (idx === 3) node.quad3 = child;\n}\n\n},{\"./insertStack\":27,\"./isSamePosition\":28,\"./node\":29,\"ngraph.random\":30}],27:[function(require,module,exports){\nmodule.exports = InsertStack;\n\n/**\n * Our implmentation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressue: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n\n},{}],28:[function(require,module,exports){\nmodule.exports = function isSamePosition(point1, point2) {\n    var dx = Math.abs(point1.x - point2.x);\n    var dy = Math.abs(point1.y - point2.y);\n\n    return (dx < 1e-8 && dy < 1e-8);\n};\n\n},{}],29:[function(require,module,exports){\n/**\n * Internal data structure to represent 2D QuadTree node\n */\nmodule.exports = function Node() {\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\n  // contain boides:\n  this.body = null;\n\n  // Child nodes are stored in quads. Each quad is presented by number:\n  // 0 | 1\n  // -----\n  // 2 | 3\n  this.quad0 = null;\n  this.quad1 = null;\n  this.quad2 = null;\n  this.quad3 = null;\n\n  // Total mass of current node\n  this.mass = 0;\n\n  // Center of mass coordinates\n  this.massX = 0;\n  this.massY = 0;\n\n  // bounding box coordinates\n  this.left = 0;\n  this.top = 0;\n  this.bottom = 0;\n  this.right = 0;\n};\n\n},{}],30:[function(require,module,exports){\nmodule.exports = {\n  random: random,\n  randomIterator: randomIterator\n};\n\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : (+ new Date());\n  var randomFunc = function() {\n      // Robert Jenkins' 32 bit integer hash function.\n      seed = ((seed + 0x7ed55d16) + (seed << 12))  & 0xffffffff;\n      seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n      seed = ((seed + 0x165667b1) + (seed << 5))   & 0xffffffff;\n      seed = ((seed + 0xd3a2646c) ^ (seed << 9))   & 0xffffffff;\n      seed = ((seed + 0xfd7046c5) + (seed << 3))   & 0xffffffff;\n      seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n      return (seed & 0xfffffff) / 0x10000000;\n  };\n\n  return {\n      /**\n       * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n       *\n       * @param maxValue Number REQUIRED. Ommitting this number will result in NaN values from PRNG.\n       */\n      next : function (maxValue) {\n          return Math.floor(randomFunc() * maxValue);\n      },\n\n      /**\n       * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n       * This function is the same as Math.random() (except that it could be seeded)\n       */\n      nextDouble : function () {\n          return randomFunc();\n      }\n  };\n}\n\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\nfunction randomIterator(array, customRandom) {\n    var localRandom = customRandom || random();\n    if (typeof localRandom.next !== 'function') {\n      throw new Error('customRandom does not match expected API: next() function is missing');\n    }\n\n    return {\n        forEach : function (callback) {\n            var i, j, t;\n            for (i = array.length - 1; i > 0; --i) {\n                j = localRandom.next(i + 1); // i inclusive\n                t = array[j];\n                array[j] = array[i];\n                array[i] = t;\n\n                callback(t);\n            }\n\n            if (array.length) {\n                callback(array[0]);\n            }\n        },\n\n        /**\n         * Shuffles array randomly, in place.\n         */\n        shuffle : function () {\n            var i, j, t;\n            for (i = array.length - 1; i > 0; --i) {\n                j = localRandom.next(i + 1); // i inclusive\n                t = array[j];\n                array[j] = array[i];\n                array[i] = t;\n            }\n\n            return array;\n        }\n    };\n}\n\n},{}],31:[function(require,module,exports){\nmodule.exports = save;\n\nfunction save(graph, customNodeTransform, customLinkTransform) {\n  // Object contains `nodes` and `links` arrays.\n  var result = {\n    nodes: [],\n    links: []\n  };\n\n  var nodeTransform = customNodeTransform || defaultTransformForNode;\n  var linkTransform = customLinkTransform || defaultTransformForLink;\n\n  graph.forEachNode(saveNode);\n  graph.forEachLink(saveLink);\n\n  return JSON.stringify(result);\n\n  function saveNode(node) {\n    // Each node of the graph is processed to take only required fields\n    // `id` and `data`\n    result.nodes.push(nodeTransform(node));\n  }\n\n  function saveLink(link) {\n    // Each link of the graph is also processed to take `fromId`, `toId` and\n    // `data`\n    result.links.push(linkTransform(link));\n  }\n\n  function defaultTransformForNode(node) {\n    var result = {\n      id: node.id\n    };\n    // We don't want to store undefined fields when it's not necessary:\n    if (node.data !== undefined) {\n      result.data = node.data;\n    }\n\n    return result;\n  }\n\n  function defaultTransformForLink(link) {\n    var result = {\n      fromId: link.fromId,\n      toId: link.toId,\n    };\n\n    if (link.data !== undefined) {\n      result.data = link.data;\n    }\n\n    return result;\n  }\n}\n\n},{}],32:[function(require,module,exports){\nmodule.exports = svg;\n\nsvg.compile = require('./lib/compile');\n\nvar compileTemplate = svg.compileTemplate = require('./lib/compile_template');\n\nvar domEvents = require('add-event-listener');\n\nvar svgns = \"http://www.w3.org/2000/svg\";\nvar xlinkns = \"http://www.w3.org/1999/xlink\";\n\nfunction svg(element, attrBag) {\n  var svgElement = augment(element);\n  if (attrBag === undefined) {\n    return svgElement;\n  }\n\n  var attributes = Object.keys(attrBag);\n  for (var i = 0; i < attributes.length; ++i) {\n    var attributeName = attributes[i];\n    var value = attrBag[attributeName];\n    if (attributeName === 'link') {\n      svgElement.link(value);\n    } else {\n      svgElement.attr(attributeName, value);\n    }\n  }\n\n  return svgElement;\n}\n\nfunction augment(element) {\n  var svgElement = element;\n\n  if (typeof element === \"string\") {\n    svgElement = window.document.createElementNS(svgns, element);\n  } else if (element.simplesvg) {\n    return element;\n  }\n\n  var compiledTempalte;\n\n  svgElement.simplesvg = true; // this is not good, since we are monkey patching svg\n  svgElement.attr = attr;\n  svgElement.append = append;\n  svgElement.link = link;\n  svgElement.text = text;\n\n  // add easy eventing\n  svgElement.on = on;\n  svgElement.off = off;\n\n  // data binding:\n  svgElement.dataSource = dataSource;\n\n  return svgElement;\n\n  function dataSource(model) {\n    if (!compiledTempalte) compiledTempalte = compileTemplate(svgElement);\n    compiledTempalte.link(model);\n    return svgElement;\n  }\n\n  function on(name, cb, useCapture) {\n    domEvents.addEventListener(svgElement, name, cb, useCapture);\n    return svgElement;\n  }\n\n  function off(name, cb, useCapture) {\n    domEvents.removeEventListener(svgElement, name, cb, useCapture);\n    return svgElement;\n  }\n\n  function append(content) {\n    var child = svg(content);\n    svgElement.appendChild(child);\n\n    return child;\n  }\n\n  function attr(name, value) {\n    if (arguments.length === 2) {\n      if (value !== null) {\n        svgElement.setAttributeNS(null, name, value);\n      } else {\n        svgElement.removeAttributeNS(null, name);\n      }\n\n      return svgElement;\n    }\n\n    return svgElement.getAttributeNS(null, name);\n  }\n\n  function link(target) {\n    if (arguments.length) {\n      svgElement.setAttributeNS(xlinkns, \"xlink:href\", target);\n      return svgElement;\n    }\n\n    return svgElement.getAttributeNS(xlinkns, \"xlink:href\");\n  }\n\n  function text(textContent) {\n    if (textContent !== undefined) {\n        svgElement.textContent = textContent;\n        return svgElement;\n    }\n    return svgElement.textContent;\n  }\n}\n\n},{\"./lib/compile\":33,\"./lib/compile_template\":34,\"add-event-listener\":2}],33:[function(require,module,exports){\nvar parser = require('./domparser.js');\nvar svg = require('../');\n\nmodule.exports = compile;\n\nfunction compile(svgText) {\n  try {\n    svgText = addNamespaces(svgText);\n    return svg(parser.parseFromString(svgText, \"text/xml\").documentElement);\n  } catch (e) {\n    throw e;\n  }\n}\n\nfunction addNamespaces(text) {\n  if (!text) return;\n\n  var namespaces = 'xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\"';\n  var match = text.match(/^<\\w+/);\n  if (match) {\n    var tagLength = match[0].length;\n    return text.substr(0, tagLength) + ' ' + namespaces + ' ' + text.substr(tagLength);\n  } else {\n    throw new Error('Cannot parse input text: invalid xml?');\n  }\n}\n\n},{\"../\":32,\"./domparser.js\":35}],34:[function(require,module,exports){\nmodule.exports = template;\n\nvar BINDING_EXPR = /{{(.+?)}}/;\n\nfunction template(domNode) {\n  var allBindings = Object.create(null);\n  extractAllBindings(domNode, allBindings);\n\n  return {\n    link: function(model) {\n      Object.keys(allBindings).forEach(function(key) {\n        var setter = allBindings[key];\n        setter.forEach(changeModel);\n      });\n\n      function changeModel(setter) {\n        setter(model);\n      }\n    }\n  };\n}\n\nfunction extractAllBindings(domNode, allBindings) {\n  var nodeType = domNode.nodeType;\n  var typeSupported = (nodeType === 1) || (nodeType === 3);\n  if (!typeSupported) return;\n  var i;\n  if (domNode.hasChildNodes()) {\n    var domChildren = domNode.childNodes;\n    for (i = 0; i < domChildren.length; ++i) {\n      extractAllBindings(domChildren[i], allBindings);\n    }\n  }\n\n  if (nodeType === 3) { // text:\n    bindTextContent(domNode, allBindings);\n  }\n\n  if (!domNode.attributes) return; // this might be a text. Need to figure out what to do in that case\n\n  var attrs = domNode.attributes;\n  for (i = 0; i < attrs.length; ++i) {\n    bindDomAttribute(attrs[i], domNode, allBindings);\n  }\n}\n\nfunction bindDomAttribute(domAttribute, element, allBindings) {\n  var value = domAttribute.value;\n  if (!value) return; // unary attribute?\n\n  var modelNameMatch = value.match(BINDING_EXPR);\n  if (!modelNameMatch) return; // does not look like a binding\n\n  var attrName = domAttribute.localName;\n  var modelPropertyName = modelNameMatch[1];\n  var isSimpleValue = modelPropertyName.indexOf('.') < 0;\n\n  if (!isSimpleValue) throw new Error('simplesvg currently does not support nested bindings');\n\n  var propertyBindings = allBindings[modelPropertyName];\n  if (!propertyBindings) {\n    propertyBindings = allBindings[modelPropertyName] = [attributeSetter];\n  } else {\n    propertyBindings.push(attributeSetter);\n  }\n\n  function attributeSetter(model) {\n    element.setAttributeNS(null, attrName, model[modelPropertyName]);\n  }\n}\nfunction bindTextContent(element, allBindings) {\n  // todo reduce duplication\n  var value = element.nodeValue;\n  if (!value) return; // unary attribute?\n\n  var modelNameMatch = value.match(BINDING_EXPR);\n  if (!modelNameMatch) return; // does not look like a binding\n\n  var modelPropertyName = modelNameMatch[1];\n  var isSimpleValue = modelPropertyName.indexOf('.') < 0;\n\n  var propertyBindings = allBindings[modelPropertyName];\n  if (!propertyBindings) {\n    propertyBindings = allBindings[modelPropertyName] = [textSetter];\n  } else {\n    propertyBindings.push(textSetter);\n  }\n\n  function textSetter(model) {\n    element.nodeValue = model[modelPropertyName];\n  }\n}\n\n},{}],35:[function(require,module,exports){\nmodule.exports = createDomparser();\n\nfunction createDomparser() {\n  if (typeof DOMParser === 'undefined') {\n    return {\n      parseFromString: fail\n    };\n  }\n  return new DOMParser();\n}\n\nfunction fail() {\n  throw new Error('DOMParser is not supported by this platform. Please open issue here https://github.com/anvaka/simplesvg');\n}\n\n},{}],36:[function(require,module,exports){\nvar centrality = require('ngraph.centrality');\n\nmodule.exports = centralityWrapper;\n\nfunction centralityWrapper() {\n  // TODO: This should not be a function\n  return {\n    betweennessCentrality: betweennessCentrality,\n    degreeCentrality: degreeCentrality\n  };\n}\n\nfunction betweennessCentrality(g) {\n  var betweenness = centrality.betweenness(g);\n  return toVivaGraphCentralityFormat(betweenness);\n}\n\nfunction degreeCentrality(g, kind) {\n  var degree = centrality.degree(g, kind);\n  return toVivaGraphCentralityFormat(degree);\n}\n\nfunction toVivaGraphCentralityFormat(centrality) {\n  return Object.keys(centrality).sort(byValue).map(toKeyValue);\n\n  function byValue(x, y) {\n    return centrality[y] - centrality[x];\n  }\n\n  function toKeyValue(key) {\n    return {\n      key: key,\n      value: centrality[key]\n    };\n  }\n}\n\n},{\"ngraph.centrality\":4}],37:[function(require,module,exports){\n/**\r\n * @fileOverview Contains collection of primitive operations under graph.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\nmodule.exports = operations;\r\n\r\nfunction operations() {\r\n\r\n    return {\r\n        /**\r\n         * Gets graph density, which is a ratio of actual number of edges to maximum\r\n         * number of edges. I.e. graph density 1 means all nodes are connected with each other with an edge.\r\n         * Density 0 - graph has no edges. Runtime: O(1)\r\n         * \r\n         * @param graph represents oriented graph structure.\r\n         * @param directed (optional boolean) represents if the graph should be treated as a directed graph.\r\n         * \r\n         * @returns density of the graph if graph has nodes. NaN otherwise. Returns density for undirected graph by default but returns density for directed graph if a boolean 'true' is passed along with the graph.\r\n         */\r\n        density : function (graph,directed) {\r\n            var nodes = graph.getNodesCount();\r\n            if (nodes === 0) {\r\n                return NaN;\r\n            }\r\n            if(directed){\r\n                return graph.getLinksCount() / (nodes * (nodes - 1));\r\n            } else {\r\n                return 2 * graph.getLinksCount() / (nodes * (nodes - 1));\r\n            }\r\n        }\r\n    };\r\n};\r\n\n},{}],38:[function(require,module,exports){\n/**\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\n */\n\nmodule.exports = domInputManager;\n\nvar dragndrop = require('./dragndrop.js');\n\nfunction domInputManager(graph, graphics) {\n  var nodeEvents = {};\n  return {\n    /**\n     * Called by renderer to listen to drag-n-drop events from node. E.g. for SVG\n     * graphics we may listen to DOM events, whereas for WebGL the graphics\n     * should provide custom eventing mechanism.\n     *\n     * @param node - to be monitored.\n     * @param handlers - object with set of three callbacks:\n     *   onStart: function(),\n     *   onDrag: function(e, offset),\n     *   onStop: function()\n     */\n    bindDragNDrop: bindDragNDrop\n  };\n\n  function bindDragNDrop(node, handlers) {\n    var events;\n    if (handlers) {\n      var nodeUI = graphics.getNodeUI(node.id);\n      events = dragndrop(nodeUI);\n      if (typeof handlers.onStart === 'function') {\n        events.onStart(handlers.onStart);\n      }\n      if (typeof handlers.onDrag === 'function') {\n        events.onDrag(handlers.onDrag);\n      }\n      if (typeof handlers.onStop === 'function') {\n        events.onStop(handlers.onStop);\n      }\n\n      nodeEvents[node.id] = events;\n    } else if ((events = nodeEvents[node.id])) {\n      events.release();\n      delete nodeEvents[node.id];\n    }\n  }\n}\n\n},{\"./dragndrop.js\":39}],39:[function(require,module,exports){\n/**\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\n */\n\nmodule.exports = dragndrop;\n\nvar documentEvents = require('../Utils/documentEvents.js');\nvar browserInfo = require('../Utils/browserInfo.js');\nvar findElementPosition = require('../Utils/findElementPosition.js');\n\n// TODO: Move to input namespace\n// TODO: Methods should be extracted into the prototype. This class\n// does not need to consume so much memory for every tracked element\nfunction dragndrop(element) {\n    var start,\n        drag,\n        end,\n        scroll,\n        prevSelectStart,\n        prevDragStart,\n\n        startX = 0,\n        startY = 0,\n        dragObject,\n        touchInProgress = false,\n        pinchZoomLength = 0,\n\n        getMousePos = function (e) {\n            var posx = 0,\n                posy = 0;\n\n            e = e || window.event;\n\n            if (e.pageX || e.pageY) {\n                posx = e.pageX;\n                posy = e.pageY;\n            } else if (e.clientX || e.clientY) {\n                posx = e.clientX + window.document.body.scrollLeft + window.document.documentElement.scrollLeft;\n                posy = e.clientY + window.document.body.scrollTop + window.document.documentElement.scrollTop;\n            }\n\n            return [posx, posy];\n        },\n\n        move = function (e, clientX, clientY) {\n            if (drag) {\n                drag(e, {x : clientX - startX, y : clientY - startY });\n            }\n\n            startX = clientX;\n            startY = clientY;\n        },\n\n        stopPropagation = function (e) {\n            if (e.stopPropagation) { e.stopPropagation(); } else { e.cancelBubble = true; }\n        },\n        preventDefault = function (e) {\n            if (e.preventDefault) { e.preventDefault(); }\n        },\n\n        handleDisabledEvent = function (e) {\n            stopPropagation(e);\n            return false;\n        },\n\n        handleMouseMove = function (e) {\n            e = e || window.event;\n\n            move(e, e.clientX, e.clientY);\n        },\n\n        handleMouseDown = function (e) {\n            e = e || window.event;\n            if (touchInProgress) {\n                // modern browsers will fire mousedown for touch events too\n                // we do not want this, since touch is handled separately.\n                stopPropagation(e);\n                return false;\n            }\n            // for IE, left click == 1\n            // for Firefox, left click == 0\n            var isLeftButton = ((e.button === 1 && window.event !== null) || e.button === 0);\n\n            if (isLeftButton) {\n                startX = e.clientX;\n                startY = e.clientY;\n\n                // TODO: bump zIndex?\n                dragObject = e.target || e.srcElement;\n\n                if (start) { start(e, {x: startX, y : startY}); }\n\n                documentEvents.on('mousemove', handleMouseMove);\n                documentEvents.on('mouseup', handleMouseUp);\n\n\n                stopPropagation(e);\n                // TODO: What if event already there? Not bullet proof:\n                prevSelectStart = window.document.onselectstart;\n                prevDragStart = window.document.ondragstart;\n\n                window.document.onselectstart = handleDisabledEvent;\n                dragObject.ondragstart = handleDisabledEvent;\n\n                // prevent text selection (except IE)\n                return false;\n            }\n        },\n\n        handleMouseUp = function (e) {\n            e = e || window.event;\n\n            documentEvents.off('mousemove', handleMouseMove);\n            documentEvents.off('mouseup', handleMouseUp);\n\n            window.document.onselectstart = prevSelectStart;\n            dragObject.ondragstart = prevDragStart;\n            dragObject = null;\n            if (end) { end(e); }\n        },\n\n        handleMouseWheel = function (e) {\n            if (typeof scroll !== 'function') {\n                return;\n            }\n\n            e = e || window.event;\n            if (e.preventDefault) {\n                e.preventDefault();\n            }\n\n            e.returnValue = false;\n            var delta,\n                mousePos = getMousePos(e),\n                elementOffset = findElementPosition(element),\n                relMousePos = {\n                    x: mousePos[0] - elementOffset[0],\n                    y: mousePos[1] - elementOffset[1]\n                };\n\n            if (e.wheelDelta) {\n                delta = e.wheelDelta / 360; // Chrome/Safari\n            } else {\n                delta = e.detail / -9; // Mozilla\n            }\n\n            scroll(e, delta, relMousePos);\n        },\n\n        updateScrollEvents = function (scrollCallback) {\n            if (!scroll && scrollCallback) {\n                // client is interested in scrolling. Start listening to events:\n                if (browserInfo.browser === 'webkit') {\n                    element.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari\n                } else {\n                    element.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others\n                }\n            } else if (scroll && !scrollCallback) {\n                if (browserInfo.browser === 'webkit') {\n                    element.removeEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari\n                } else {\n                    element.removeEventListener('DOMMouseScroll', handleMouseWheel, false); // Others\n                }\n            }\n\n            scroll = scrollCallback;\n        },\n\n        getPinchZoomLength = function(finger1, finger2) {\n            return (finger1.clientX - finger2.clientX) * (finger1.clientX - finger2.clientX) +\n                   (finger1.clientY - finger2.clientY) * (finger1.clientY - finger2.clientY);\n        },\n\n        handleTouchMove = function (e) {\n            if (e.touches.length === 1) {\n                stopPropagation(e);\n\n                var touch = e.touches[0];\n                move(e, touch.clientX, touch.clientY);\n            } else if (e.touches.length === 2) {\n                // it's a zoom:\n                var currentPinchLength = getPinchZoomLength(e.touches[0], e.touches[1]);\n                var delta = 0;\n                if (currentPinchLength < pinchZoomLength) {\n                    delta = -1;\n                } else if (currentPinchLength > pinchZoomLength) {\n                    delta = 1;\n                }\n                scroll(e, delta, {x: e.touches[0].clientX, y: e.touches[0].clientY});\n                pinchZoomLength = currentPinchLength;\n                stopPropagation(e);\n                preventDefault(e);\n            }\n        },\n\n        handleTouchEnd = function (e) {\n            touchInProgress = false;\n            documentEvents.off('touchmove', handleTouchMove);\n            documentEvents.off('touchend', handleTouchEnd);\n            documentEvents.off('touchcancel', handleTouchEnd);\n            dragObject = null;\n            if (end) { end(e); }\n        },\n\n        handleSignleFingerTouch = function (e, touch) {\n            stopPropagation(e);\n            preventDefault(e);\n\n            startX = touch.clientX;\n            startY = touch.clientY;\n\n            dragObject = e.target || e.srcElement;\n\n            if (start) { start(e, {x: startX, y : startY}); }\n            // TODO: can I enter into the state when touch is in progress\n            // but it's still a single finger touch?\n            if (!touchInProgress) {\n                touchInProgress = true;\n                documentEvents.on('touchmove', handleTouchMove);\n                documentEvents.on('touchend', handleTouchEnd);\n                documentEvents.on('touchcancel', handleTouchEnd);\n            }\n        },\n\n        handleTouchStart = function (e) {\n            if (e.touches.length === 1) {\n                return handleSignleFingerTouch(e, e.touches[0]);\n            } else if (e.touches.length === 2) {\n                // handleTouchMove() will care about pinch zoom.\n                stopPropagation(e);\n                preventDefault(e);\n\n                pinchZoomLength = getPinchZoomLength(e.touches[0], e.touches[1]);\n\n            }\n            // don't care about the rest.\n        };\n\n\n    element.addEventListener('mousedown', handleMouseDown);\n    element.addEventListener('touchstart', handleTouchStart);\n\n    return {\n        onStart : function (callback) {\n            start = callback;\n            return this;\n        },\n\n        onDrag : function (callback) {\n            drag = callback;\n            return this;\n        },\n\n        onStop : function (callback) {\n            end = callback;\n            return this;\n        },\n\n        /**\n         * Occurs when mouse wheel event happens. callback = function(e, scrollDelta, scrollPoint);\n         */\n        onScroll : function (callback) {\n            updateScrollEvents(callback);\n            return this;\n        },\n\n        release : function () {\n            // TODO: could be unsafe. We might wanna release dragObject, etc.\n            element.removeEventListener('mousedown', handleMouseDown);\n            element.removeEventListener('touchstart', handleTouchStart);\n\n            documentEvents.off('mousemove', handleMouseMove);\n            documentEvents.off('mouseup', handleMouseUp);\n            documentEvents.off('touchmove', handleTouchMove);\n            documentEvents.off('touchend', handleTouchEnd);\n            documentEvents.off('touchcancel', handleTouchEnd);\n\n            updateScrollEvents(null);\n        }\n    };\n}\n\n},{\"../Utils/browserInfo.js\":43,\"../Utils/documentEvents.js\":44,\"../Utils/findElementPosition.js\":45}],40:[function(require,module,exports){\n/**\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\n */\n\nmodule.exports = webglInputManager;\n\nvar createInputEvents = require('../WebGL/webglInputEvents.js');\n\nfunction webglInputManager(graph, graphics) {\n    var inputEvents = createInputEvents(graphics),\n        draggedNode = null,\n        internalHandlers = {},\n        pos = {x : 0, y : 0};\n\n    inputEvents.mouseDown(function (node, e) {\n        draggedNode = node;\n        pos.x = e.clientX;\n        pos.y = e.clientY;\n\n        inputEvents.mouseCapture(draggedNode);\n\n        var handlers = internalHandlers[node.id];\n        if (handlers && handlers.onStart) {\n            handlers.onStart(e, pos);\n        }\n\n        return true;\n    }).mouseUp(function (node) {\n        inputEvents.releaseMouseCapture(draggedNode);\n\n        draggedNode = null;\n        var handlers = internalHandlers[node.id];\n        if (handlers && handlers.onStop) {\n            handlers.onStop();\n        }\n        return true;\n    }).mouseMove(function (node, e) {\n        if (draggedNode) {\n            var handlers = internalHandlers[draggedNode.id];\n            if (handlers && handlers.onDrag) {\n                handlers.onDrag(e, {x : e.clientX - pos.x, y : e.clientY - pos.y });\n            }\n\n            pos.x = e.clientX;\n            pos.y = e.clientY;\n            return true;\n        }\n    });\n\n    return {\n        /**\n         * Called by renderer to listen to drag-n-drop events from node. E.g. for SVG\n         * graphics we may listen to DOM events, whereas for WebGL we graphics\n         * should provide custom eventing mechanism.\n         *\n         * @param node - to be monitored.\n         * @param handlers - object with set of three callbacks:\n         *   onStart: function(),\n         *   onDrag: function(e, offset),\n         *   onStop: function()\n         */\n        bindDragNDrop : function (node, handlers) {\n            internalHandlers[node.id] = handlers;\n            if (!handlers) {\n                delete internalHandlers[node.id];\n            }\n        }\n    };\n}\n\n},{\"../WebGL/webglInputEvents.js\":61}],41:[function(require,module,exports){\nmodule.exports = constant;\n\nvar merge = require('ngraph.merge');\nvar random = require('ngraph.random').random;\nvar Rect = require('../Utils/rect.js');\n\n/**\n * Does not really perform any layouting algorithm but is compliant\n * with renderer interface. Allowing clients to provide specific positioning\n * callback and get static layout of the graph\n *\n * @param {Viva.Graph.graph} graph to layout\n * @param {Object} userSettings\n */\nfunction constant(graph, userSettings) {\n    userSettings = merge(userSettings, {\n        maxX : 1024,\n        maxY : 1024,\n        seed : 'Deterministic randomness made me do this'\n    });\n    // This class simply follows API, it does not use some of the arguments:\n    /*jshint unused: false */\n    var rand = random(userSettings.seed),\n        graphRect = new Rect(Number.MAX_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MIN_VALUE),\n        layoutLinks = {},\n\n        placeNodeCallback = function (node) {\n            return {\n              x: rand.next(userSettings.maxX),\n              y: rand.next(userSettings.maxY)\n            };\n        },\n\n        updateGraphRect = function (position, graphRect) {\n            if (position.x < graphRect.x1) { graphRect.x1 = position.x; }\n            if (position.x > graphRect.x2) { graphRect.x2 = position.x; }\n            if (position.y < graphRect.y1) { graphRect.y1 = position.y; }\n            if (position.y > graphRect.y2) { graphRect.y2 = position.y; }\n        },\n\n        layoutNodes = typeof Object.create === 'function' ? Object.create(null) : {},\n\n        ensureNodeInitialized = function (node) {\n            layoutNodes[node.id] = placeNodeCallback(node);\n            updateGraphRect(layoutNodes[node.id], graphRect);\n        },\n\n        updateNodePositions = function () {\n            if (graph.getNodesCount() === 0) { return; }\n\n            graphRect.x1 = Number.MAX_VALUE;\n            graphRect.y1 = Number.MAX_VALUE;\n            graphRect.x2 = Number.MIN_VALUE;\n            graphRect.y2 = Number.MIN_VALUE;\n\n            graph.forEachNode(ensureNodeInitialized);\n        },\n\n        ensureLinkInitialized = function (link) {\n          layoutLinks[link.id] = link;\n        },\n\n        onGraphChanged = function(changes) {\n            for (var i = 0; i < changes.length; ++i) {\n                var change = changes[i];\n                if (change.node) {\n                    if (change.changeType === 'add') {\n                        ensureNodeInitialized(change.node);\n                    } else {\n                        delete layoutNodes[change.node.id];\n                    }\n                } if (change.link) {\n                    if (change.changeType === 'add') {\n                        ensureLinkInitialized(change.link);\n                    } else {\n                        delete layoutLinks[change.link.id];\n                    }\n                }\n            }\n        };\n\n    graph.forEachNode(ensureNodeInitialized);\n    graph.forEachLink(ensureLinkInitialized);\n    graph.on('changed', onGraphChanged);\n\n    return {\n        /**\n         * Attempts to layout graph within given number of iterations.\n         *\n         * @param {integer} [iterationsCount] number of algorithm's iterations.\n         *  The constant layout ignores this parameter.\n         */\n        run : function (iterationsCount) {\n            this.step();\n        },\n\n        /**\n         * One step of layout algorithm.\n         */\n        step : function () {\n            updateNodePositions();\n\n            return true; // no need to continue.\n        },\n\n        /**\n         * Returns rectangle structure {x1, y1, x2, y2}, which represents\n         * current space occupied by graph.\n         */\n        getGraphRect : function () {\n            return graphRect;\n        },\n\n        /**\n         * Request to release all resources\n         */\n        dispose : function () {\n            graph.off('change', onGraphChanged);\n        },\n\n        /*\n         * Checks whether given node is pinned; all nodes in this layout are pinned.\n         */\n        isNodePinned: function (node) {\n            return true;\n        },\n\n        /*\n         * Requests layout algorithm to pin/unpin node to its current position\n         * Pinned nodes should not be affected by layout algorithm and always\n         * remain at their position\n         */\n        pinNode: function (node, isPinned) {\n           // noop\n        },\n\n        /*\n         * Gets position of a node by its id. If node was not seen by this\n         * layout algorithm undefined value is returned;\n         */\n        getNodePosition: getNodePosition,\n\n        /**\n         * Returns {from, to} position of a link.\n         */\n        getLinkPosition: function (linkId) {\n          var link = layoutLinks[linkId];\n          return {\n              from : getNodePosition(link.fromId),\n              to : getNodePosition(link.toId)\n          };\n        },\n\n        /**\n         * Sets position of a node to a given coordinates\n         */\n        setNodePosition: function (nodeId, x, y) {\n            var pos = layoutNodes[nodeId];\n            if (pos) {\n                pos.x = x;\n                pos.y = y;\n            }\n        },\n\n        // Layout specific methods:\n\n        /**\n         * Based on argument either update default node placement callback or\n         * attempts to place given node using current placement callback.\n         * Setting new node callback triggers position update for all nodes.\n         *\n         * @param {Object} newPlaceNodeCallbackOrNode - if it is a function then\n         * default node placement callback is replaced with new one. Node placement\n         * callback has a form of function (node) {}, and is expected to return an\n         * object with x and y properties set to numbers.\n         *\n         * Otherwise if it's not a function the argument is treated as graph node\n         * and current node placement callback will be used to place it.\n         */\n        placeNode : function (newPlaceNodeCallbackOrNode) {\n            if (typeof newPlaceNodeCallbackOrNode === 'function') {\n                placeNodeCallback = newPlaceNodeCallbackOrNode;\n                updateNodePositions();\n                return this;\n            }\n\n            // it is not a request to update placeNodeCallback, trying to place\n            // a node using current callback:\n            return placeNodeCallback(newPlaceNodeCallbackOrNode);\n        }\n\n    };\n\n    function getNodePosition(nodeId) {\n        return layoutNodes[nodeId];\n    }\n}\n\n},{\"../Utils/rect.js\":49,\"ngraph.merge\":17,\"ngraph.random\":30}],42:[function(require,module,exports){\n/**\n * This module provides compatibility layer with 0.6.x library. It will be\n * removed in the next version\n */\n\nvar events = require('ngraph.events');\n\nmodule.exports = backwardCompatibleEvents;\n\nfunction backwardCompatibleEvents(g) {\n  console.log(\"This method is deprecated. Please use Viva.events() instead\");\n\n  if (!g) {\n    return g;\n  }\n\n  var eventsDefined = (g.on !== undefined) ||\n    (g.off !== undefined) ||\n    (g.fire !== undefined);\n\n  if (eventsDefined) {\n    // events already defined, ignore\n    return {\n      extend: function() {\n        return g;\n      },\n      on: g.on,\n      stop: g.off\n    };\n  }\n\n  return {\n    extend: extend,\n    on: g.on,\n    stop: g.off\n  };\n\n  function extend() {\n    var backwardCompatible = events(g);\n    backwardCompatible.addEventListener = backwardCompatible.on;\n    return backwardCompatible;\n  }\n}\n\n},{\"ngraph.events\":9}],43:[function(require,module,exports){\nmodule.exports = browserInfo();\r\n\r\nfunction browserInfo() {\r\n  if (typeof window === \"undefined\" || !window.hasOwnProperty(\"navigator\")) {\r\n    return {\r\n      browser : \"\",\r\n      version : \"0\"\r\n    };\r\n  }\r\n\r\n  var ua = window.navigator.userAgent.toLowerCase(),\r\n  // Useragent RegExp\r\n  rwebkit = /(webkit)[ \\/]([\\w.]+)/,\r\n  ropera = /(opera)(?:.*version)?[ \\/]([\\w.]+)/,\r\n  rmsie = /(msie) ([\\w.]+)/,\r\n  rmozilla = /(mozilla)(?:.*? rv:([\\w.]+))?/,\r\n  match = rwebkit.exec(ua) ||\r\n    ropera.exec(ua) ||\r\n    rmsie.exec(ua) ||\r\n    (ua.indexOf(\"compatible\") < 0 && rmozilla.exec(ua)) ||\r\n    [];\r\n\r\n  return {\r\n    browser: match[1] || \"\",\r\n    version: match[2] || \"0\"\r\n  };\r\n}\r\n\n},{}],44:[function(require,module,exports){\nvar nullEvents = require('./nullEvents.js');\n\nmodule.exports = createDocumentEvents();\n\nfunction createDocumentEvents() {\n  if (typeof document === undefined) {\n    return nullEvents;\n  }\n\n  return {\n    on: on,\n    off: off\n  };\n}\n\nfunction on(eventName, handler) {\n  document.addEventListener(eventName, handler);\n}\n\nfunction off(eventName, handler) {\n  document.removeEventListener(eventName, handler);\n}\n\n},{\"./nullEvents.js\":48}],45:[function(require,module,exports){\n/**\n * Finds the absolute position of an element on a page\n */\nmodule.exports = findElementPosition;\n\nfunction findElementPosition(obj) {\n    var curleft = 0,\n        curtop = 0;\n    if (obj.offsetParent) {\n        do {\n            curleft += obj.offsetLeft;\n            curtop += obj.offsetTop;\n        } while ((obj = obj.offsetParent) !== null);\n    }\n\n    return [curleft, curtop];\n}\n\n},{}],46:[function(require,module,exports){\nmodule.exports = getDimension;\r\n\r\nfunction getDimension(container) {\r\n    if (!container) {\r\n        throw {\r\n            message : 'Cannot get dimensions of undefined container'\r\n        };\r\n    }\r\n\r\n    // TODO: Potential cross browser bug.\r\n    var width = container.clientWidth;\r\n    var height = container.clientHeight;\r\n\r\n    return {\r\n        left : 0,\r\n        top : 0,\r\n        width : width,\r\n        height : height\r\n    };\r\n}\r\n\n},{}],47:[function(require,module,exports){\nvar intersect = require('gintersect');\n\nmodule.exports = intersectRect;\n\nfunction intersectRect(left, top, right, bottom, x1, y1, x2, y2) {\n  return intersect(left, top, left, bottom, x1, y1, x2, y2) ||\n    intersect(left, bottom, right, bottom, x1, y1, x2, y2) ||\n    intersect(right, bottom, right, top, x1, y1, x2, y2) ||\n    intersect(right, top, left, top, x1, y1, x2, y2);\n}\n\n},{\"gintersect\":3}],48:[function(require,module,exports){\nmodule.exports = createNullEvents();\n\nfunction createNullEvents() {\n  return {\n    on: noop,\n    off: noop,\n    stop: noop\n  };\n}\n\nfunction noop() { }\n\n},{}],49:[function(require,module,exports){\nmodule.exports = Rect;\n\n/**\n * Very generic rectangle.\n */\nfunction Rect (x1, y1, x2, y2) {\n    this.x1 = x1 || 0;\n    this.y1 = y1 || 0;\n    this.x2 = x2 || 0;\n    this.y2 = y2 || 0;\n}\n\n},{}],50:[function(require,module,exports){\n(function (global){\n/**\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nmodule.exports = createTimer();\r\n\r\nfunction createTimer() {\r\n  var lastTime = 0,\r\n    vendors = ['ms', 'moz', 'webkit', 'o'],\r\n    i,\r\n    scope;\r\n\r\n  if (typeof window !== 'undefined') {\r\n    scope = window;\r\n  } else if (typeof global !== 'undefined') {\r\n    scope = global;\r\n  } else {\r\n    scope = {\r\n      setTimeout: noop,\r\n      clearTimeout: noop\r\n    };\r\n  }\r\n\r\n  for (i = 0; i < vendors.length && !scope.requestAnimationFrame; ++i) {\r\n    var vendorPrefix = vendors[i];\r\n    scope.requestAnimationFrame = scope[vendorPrefix + 'RequestAnimationFrame'];\r\n    scope.cancelAnimationFrame =\r\n      scope[vendorPrefix + 'CancelAnimationFrame'] || scope[vendorPrefix + 'CancelRequestAnimationFrame'];\r\n  }\r\n\r\n  if (!scope.requestAnimationFrame) {\r\n    scope.requestAnimationFrame = rafPolyfill;\r\n  }\r\n\r\n  if (!scope.cancelAnimationFrame) {\r\n    scope.cancelAnimationFrame = cancelRafPolyfill;\r\n  }\r\n\r\n  return timer;\r\n\r\n  /**\r\n   * Timer that fires callback with given interval (in ms) until\r\n   * callback returns true;\r\n   */\r\n  function timer(callback) {\r\n    var intervalId;\r\n    startTimer(); // start it right away.\r\n\r\n    return {\r\n      /**\r\n       * Stops execution of the callback\r\n       */\r\n      stop: stopTimer,\r\n\r\n      restart: restart\r\n    };\r\n\r\n    function startTimer() {\r\n      intervalId = scope.requestAnimationFrame(startTimer);\r\n      if (!callback()) {\r\n        stopTimer();\r\n      }\r\n    }\r\n\r\n    function stopTimer() {\r\n      scope.cancelAnimationFrame(intervalId);\r\n      intervalId = 0;\r\n    }\r\n\r\n    function restart() {\r\n      if (!intervalId) {\r\n        startTimer();\r\n      }\r\n    }\r\n  }\r\n\r\n  function rafPolyfill(callback) {\r\n    var currTime = new Date().getTime();\r\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n    var id = scope.setTimeout(function() {\r\n      callback(currTime + timeToCall);\r\n    }, timeToCall);\r\n    lastTime = currTime + timeToCall;\r\n    return id;\r\n  }\r\n\r\n  function cancelRafPolyfill(id) {\r\n    scope.clearTimeout(id);\r\n  }\r\n}\r\n\r\nfunction noop() {}\r\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],51:[function(require,module,exports){\nvar nullEvents = require('./nullEvents.js');\n\nmodule.exports = createDocumentEvents();\n\nfunction createDocumentEvents() {\n  if (typeof window === 'undefined') {\n    return nullEvents;\n  }\n\n  return {\n    on: on,\n    off: off\n  };\n}\n\nfunction on(eventName, handler) {\n  window.addEventListener(eventName, handler);\n}\n\nfunction off(eventName, handler) {\n  window.removeEventListener(eventName, handler);\n}\n\n\n},{\"./nullEvents.js\":48}],52:[function(require,module,exports){\n/**\r\n * @fileOverview Defines a graph renderer that uses CSS based drawings.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nmodule.exports = renderer;\r\n\r\nvar eventify = require('ngraph.events');\r\nvar forceDirected = require('ngraph.forcelayout');\r\nvar svgGraphics = require('./svgGraphics.js');\r\nvar windowEvents = require('../Utils/windowEvents.js');\r\nvar domInputManager = require('../Input/domInputManager.js');\r\nvar timer = require('../Utils/timer.js');\r\nvar getDimension = require('../Utils/getDimensions.js');\r\nvar dragndrop = require('../Input/dragndrop.js');\r\n\r\n/**\r\n * This is heart of the rendering. Class accepts graph to be rendered and rendering settings.\r\n * It monitors graph changes and depicts them accordingly.\r\n *\r\n * @param graph - Viva.Graph.graph() object to be rendered.\r\n * @param settings - rendering settings, composed from the following parts (with their defaults shown):\r\n *   settings = {\r\n *     // Represents a module that is capable of displaying graph nodes and links.\r\n *     // all graphics has to correspond to defined interface and can be later easily\r\n *     // replaced for specific needs (e.g. adding WebGL should be piece of cake as long\r\n *     // as WebGL has implemented required interface). See svgGraphics for example.\r\n *     graphics : Viva.Graph.View.svgGraphics(),\r\n *\r\n *     // Where the renderer should draw graph. Container size matters, because\r\n *     // renderer will attempt center graph to that size. Also graphics modules\r\n *     // might depend on it.\r\n *     container : document.body,\r\n *\r\n *     // Defines whether graph can respond to use input\r\n *     interactive: true,\r\n *\r\n *     // Layout algorithm to be used. The algorithm is expected to comply with defined\r\n *     // interface and is expected to be iterative. Renderer will use it then to calculate\r\n *     // graph's layout. For examples of the interface refer to Viva.Graph.Layout.forceDirected()\r\n *     layout : Viva.Graph.Layout.forceDirected(),\r\n *\r\n *     // Directs renderer to display links. Usually rendering links is the slowest part of this\r\n *     // library. So if you don't need to display links, consider settings this property to false.\r\n *     renderLinks : true,\r\n *\r\n *     // Number of layout iterations to run before displaying the graph. The bigger you set this number\r\n *     // the closer to ideal position graph will appear first time. But be careful: for large graphs\r\n *     // it can freeze the browser.\r\n *     prerender : 0\r\n *   }\r\n */\r\nfunction renderer(graph, settings) {\r\n  // TODO: This class is getting hard to understand. Consider refactoring.\r\n  // TODO: I have a technical debt here: fix scaling/recentering! Currently it's a total mess.\r\n  var FRAME_INTERVAL = 30;\r\n\r\n  settings = settings || {};\r\n\r\n  var layout = settings.layout,\r\n    graphics = settings.graphics,\r\n    container = settings.container,\r\n    interactive = settings.interactive !== undefined ? settings.interactive : true,\r\n    inputManager,\r\n    animationTimer,\r\n    rendererInitialized = false,\r\n    updateCenterRequired = true,\r\n\r\n    isStable = false,\r\n    userInteraction = false,\r\n    isPaused = false,\r\n\r\n    transform = {\r\n      offsetX: 0,\r\n      offsetY: 0,\r\n      scale: 1\r\n    },\r\n\r\n    publicEvents = eventify({}),\r\n    containerDrag;\r\n\r\n  return {\r\n    /**\r\n     * Performs rendering of the graph.\r\n     *\r\n     * @param iterationsCount if specified renderer will run only given number of iterations\r\n     * and then stop. Otherwise graph rendering is performed indefinitely.\r\n     *\r\n     * Note: if rendering stopped by used started dragging nodes or new nodes were added to the\r\n     * graph renderer will give run more iterations to reflect changes.\r\n     */\r\n    run: function(iterationsCount) {\r\n\r\n      if (!rendererInitialized) {\r\n        prepareSettings();\r\n        prerender();\r\n\r\n        initDom();\r\n        updateCenter();\r\n        listenToEvents();\r\n\r\n        rendererInitialized = true;\r\n      }\r\n\r\n      renderIterations(iterationsCount);\r\n\r\n      return this;\r\n    },\r\n\r\n    reset: function() {\r\n      graphics.resetScale();\r\n      updateCenter();\r\n      transform.scale = 1;\r\n    },\r\n\r\n    pause: function() {\r\n      isPaused = true;\r\n      animationTimer.stop();\r\n    },\r\n\r\n    resume: function() {\r\n      isPaused = false;\r\n      animationTimer.restart();\r\n    },\r\n\r\n    rerender: function() {\r\n      renderGraph();\r\n      return this;\r\n    },\r\n\r\n    zoomOut: function() {\r\n      return scale(true);\r\n    },\r\n\r\n    zoomIn: function() {\r\n      return scale(false);\r\n    },\r\n\r\n    /**\r\n     * Returns current transformation matrix.\r\n     */\r\n    getTransform: function() {\r\n      return transform;\r\n    },\r\n\r\n    /**\r\n     * Centers renderer at x,y graph's coordinates\r\n     */\r\n    moveTo: function(x, y) {\r\n      graphics.graphCenterChanged(transform.offsetX - x * transform.scale, transform.offsetY - y * transform.scale);\r\n      renderGraph();\r\n    },\r\n\r\n    /**\r\n     * Gets current graphics object\r\n     */\r\n    getGraphics: function() {\r\n      return graphics;\r\n    },\r\n    \r\n    getLayout: function() {\r\n      return layout;\r\n    },\r\n\r\n    /**\r\n     * Removes this renderer and deallocates all resources/timers\r\n     */\r\n    dispose: function() {\r\n      stopListenToEvents(); // I quit!\r\n    },\r\n\r\n    on: function(eventName, callback) {\r\n      publicEvents.on(eventName, callback);\r\n      return this;\r\n    },\r\n\r\n    off: function(eventName, callback) {\r\n      publicEvents.off(eventName, callback);\r\n      return this;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Checks whether given interaction (node/scroll) is enabled\r\n   */\r\n  function isInteractive(interactionName) {\r\n    if (typeof interactive === 'string') {\r\n      return interactive.indexOf(interactionName) >= 0;\r\n    } else if (typeof interactive === 'boolean') {\r\n      return interactive;\r\n    }\r\n    return true; // default setting\r\n  }\r\n\r\n  function prepareSettings() {\r\n    container = container || window.document.body;\r\n    layout = layout || forceDirected(graph, {\r\n      springLength: 80,\r\n      springCoeff: 0.0002,\r\n    });\r\n    graphics = graphics || svgGraphics(graph, {\r\n      container: container\r\n    });\r\n\r\n    if (!settings.hasOwnProperty('renderLinks')) {\r\n      settings.renderLinks = true;\r\n    }\r\n\r\n    settings.prerender = settings.prerender || 0;\r\n    inputManager = (graphics.inputManager || domInputManager)(graph, graphics);\r\n  }\r\n\r\n  function renderGraph() {\r\n    graphics.beginRender();\r\n\r\n    // todo: move this check graphics\r\n    if (settings.renderLinks) {\r\n      graphics.renderLinks();\r\n    }\r\n    graphics.renderNodes();\r\n    graphics.endRender();\r\n  }\r\n\r\n  function onRenderFrame() {\r\n    isStable = layout.step() && !userInteraction;\r\n    renderGraph();\r\n\r\n    return !isStable;\r\n  }\r\n\r\n  function renderIterations(iterationsCount) {\r\n    if (animationTimer) {\r\n      return;\r\n    }\r\n\r\n    if (iterationsCount !== undefined) {\r\n      animationTimer = timer(function() {\r\n        iterationsCount -= 1;\r\n        if (iterationsCount < 0) {\r\n          var needMoreFrames = false;\r\n          return needMoreFrames;\r\n        }\r\n\r\n        return onRenderFrame();\r\n      }, FRAME_INTERVAL);\r\n    } else {\r\n      animationTimer = timer(onRenderFrame, FRAME_INTERVAL);\r\n    }\r\n  }\r\n\r\n  function resetStable() {\r\n    if (isPaused) {\r\n      return;\r\n    }\r\n\r\n    isStable = false;\r\n    animationTimer.restart();\r\n  }\r\n\r\n  function prerender() {\r\n    // To get good initial positions for the graph\r\n    // perform several prerender steps in background.\r\n    if (typeof settings.prerender === 'number' && settings.prerender > 0) {\r\n      for (var i = 0; i < settings.prerender; i += 1) {\r\n        layout.step();\r\n      }\r\n    }\r\n  }\r\n\r\n  function updateCenter() {\r\n    var graphRect = layout.getGraphRect(),\r\n      containerSize = getDimension(container);\r\n\r\n    var cx = (graphRect.x2 + graphRect.x1) / 2;\r\n    var cy = (graphRect.y2 + graphRect.y1) / 2;\r\n    transform.offsetX = containerSize.width / 2 - (cx * transform.scale - cx);\r\n    transform.offsetY = containerSize.height / 2 - (cy * transform.scale - cy);\r\n    graphics.graphCenterChanged(transform.offsetX, transform.offsetY);\r\n\r\n    updateCenterRequired = false;\r\n  }\r\n\r\n  function createNodeUi(node) {\r\n    var nodePosition = layout.getNodePosition(node.id);\r\n    graphics.addNode(node, nodePosition);\r\n  }\r\n\r\n  function removeNodeUi(node) {\r\n    graphics.releaseNode(node);\r\n  }\r\n\r\n  function createLinkUi(link) {\r\n    var linkPosition = layout.getLinkPosition(link.id);\r\n    graphics.addLink(link, linkPosition);\r\n  }\r\n\r\n  function removeLinkUi(link) {\r\n    graphics.releaseLink(link);\r\n  }\r\n\r\n  function listenNodeEvents(node) {\r\n    if (!isInteractive('node')) {\r\n      return;\r\n    }\r\n\r\n    var wasPinned = false;\r\n\r\n    // TODO: This may not be memory efficient. Consider reusing handlers object.\r\n    inputManager.bindDragNDrop(node, {\r\n      onStart: function() {\r\n        wasPinned = layout.isNodePinned(node);\r\n        layout.pinNode(node, true);\r\n        userInteraction = true;\r\n        resetStable();\r\n      },\r\n      onDrag: function(e, offset) {\r\n        var oldPos = layout.getNodePosition(node.id);\r\n        layout.setNodePosition(node.id,\r\n          oldPos.x + offset.x / transform.scale,\r\n          oldPos.y + offset.y / transform.scale);\r\n\r\n        userInteraction = true;\r\n\r\n        renderGraph();\r\n      },\r\n      onStop: function() {\r\n        layout.pinNode(node, wasPinned);\r\n        userInteraction = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  function releaseNodeEvents(node) {\r\n    inputManager.bindDragNDrop(node, null);\r\n  }\r\n\r\n  function initDom() {\r\n    graphics.init(container);\r\n\r\n    graph.forEachNode(createNodeUi);\r\n\r\n    if (settings.renderLinks) {\r\n      graph.forEachLink(createLinkUi);\r\n    }\r\n  }\r\n\r\n  function releaseDom() {\r\n    graphics.release(container);\r\n  }\r\n\r\n  function processNodeChange(change) {\r\n    var node = change.node;\r\n\r\n    if (change.changeType === 'add') {\r\n      createNodeUi(node);\r\n      listenNodeEvents(node);\r\n      if (updateCenterRequired) {\r\n        updateCenter();\r\n      }\r\n    } else if (change.changeType === 'remove') {\r\n      releaseNodeEvents(node);\r\n      removeNodeUi(node);\r\n      if (graph.getNodesCount() === 0) {\r\n        updateCenterRequired = true; // Next time when node is added - center the graph.\r\n      }\r\n    } else if (change.changeType === 'update') {\r\n      releaseNodeEvents(node);\r\n      removeNodeUi(node);\r\n\r\n      createNodeUi(node);\r\n      listenNodeEvents(node);\r\n    }\r\n  }\r\n\r\n  function processLinkChange(change) {\r\n    var link = change.link;\r\n    if (change.changeType === 'add') {\r\n      if (settings.renderLinks) {\r\n        createLinkUi(link);\r\n      }\r\n    } else if (change.changeType === 'remove') {\r\n      if (settings.renderLinks) {\r\n        removeLinkUi(link);\r\n      }\r\n    } else if (change.changeType === 'update') {\r\n      throw 'Update type is not implemented. TODO: Implement me!';\r\n    }\r\n  }\r\n\r\n  function onGraphChanged(changes) {\r\n    var i, change;\r\n    for (i = 0; i < changes.length; i += 1) {\r\n      change = changes[i];\r\n      if (change.node) {\r\n        processNodeChange(change);\r\n      } else if (change.link) {\r\n        processLinkChange(change);\r\n      }\r\n    }\r\n\r\n    resetStable();\r\n  }\r\n\r\n  function onWindowResized() {\r\n    updateCenter();\r\n    onRenderFrame();\r\n  }\r\n\r\n  function releaseContainerDragManager() {\r\n    if (containerDrag) {\r\n      containerDrag.release();\r\n      containerDrag = null;\r\n    }\r\n  }\r\n\r\n  function releaseGraphEvents() {\r\n    graph.off('changed', onGraphChanged);\r\n  }\r\n\r\n  function scale(out, scrollPoint) {\r\n    if (!scrollPoint) {\r\n      var containerSize = getDimension(container);\r\n      scrollPoint = {\r\n        x: containerSize.width / 2,\r\n        y: containerSize.height / 2\r\n      };\r\n    }\r\n    var scaleFactor = Math.pow(1 + 0.4, out ? -0.2 : 0.2);\r\n    transform.scale = graphics.scale(scaleFactor, scrollPoint);\r\n\r\n    renderGraph();\r\n    publicEvents.fire('scale', transform.scale);\r\n\r\n    return transform.scale;\r\n  }\r\n\r\n  function listenToEvents() {\r\n    windowEvents.on('resize', onWindowResized);\r\n\r\n    releaseContainerDragManager();\r\n    if (isInteractive('drag')) {\r\n      containerDrag = dragndrop(container);\r\n      containerDrag.onDrag(function(e, offset) {\r\n        graphics.translateRel(offset.x, offset.y);\r\n\r\n        renderGraph();\r\n        publicEvents.fire('drag', offset);\r\n      });\r\n    }\r\n\r\n    if (isInteractive('scroll')) {\r\n      if (!containerDrag) {\r\n        containerDrag = dragndrop(container);\r\n      }\r\n      containerDrag.onScroll(function(e, scaleOffset, scrollPoint) {\r\n        scale(scaleOffset < 0, scrollPoint);\r\n      });\r\n    }\r\n\r\n    graph.forEachNode(listenNodeEvents);\r\n\r\n    releaseGraphEvents();\r\n    graph.on('changed', onGraphChanged);\r\n  }\r\n\r\n  function stopListenToEvents() {\r\n    rendererInitialized = false;\r\n    releaseGraphEvents();\r\n    releaseContainerDragManager();\r\n    windowEvents.off('resize', onWindowResized);\r\n    publicEvents.off();\r\n    animationTimer.stop();\r\n\r\n    graph.forEachLink(function(link) {\r\n      if (settings.renderLinks) {\r\n        removeLinkUi(link);\r\n      }\r\n    });\r\n\r\n    graph.forEachNode(function(node) {\r\n      releaseNodeEvents(node);\r\n      removeNodeUi(node);\r\n    });\r\n\r\n    layout.dispose();\r\n    releaseDom();\r\n  }\r\n}\r\n\n},{\"../Input/domInputManager.js\":38,\"../Input/dragndrop.js\":39,\"../Utils/getDimensions.js\":46,\"../Utils/timer.js\":50,\"../Utils/windowEvents.js\":51,\"./svgGraphics.js\":53,\"ngraph.events\":9,\"ngraph.forcelayout\":11}],53:[function(require,module,exports){\n/**\r\n * @fileOverview Defines a graph renderer that uses SVG based drawings.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nmodule.exports = svgGraphics;\r\n\r\nvar svg = require('simplesvg');\r\nvar eventify = require('ngraph.events');\r\nvar domInputManager = require('../Input/domInputManager.js');\r\n\r\n/**\r\n * Performs svg-based graph rendering. This module does not perform\r\n * layout, but only visualizes nodes and edges of the graph.\r\n */\r\nfunction svgGraphics() {\r\n    var svgContainer,\r\n        svgRoot,\r\n        offsetX = 0,\r\n        offsetY = 0,\r\n        initCallback,\r\n        actualScale = 1,\r\n        allNodes = {},\r\n        allLinks = {},\r\n/*jshint unused: false */\r\n        nodeBuilder = function (node) {\r\n            return svg(\"rect\")\r\n                     .attr(\"width\", 10)\r\n                     .attr(\"height\", 10)\r\n                     .attr(\"fill\", \"#00a2e8\");\r\n        },\r\n\r\n        nodePositionCallback = function (nodeUI, pos) {\r\n            // TODO: Remove magic 5. It should be half of the width or height of the node.\r\n            nodeUI.attr(\"x\", pos.x - 5)\r\n                  .attr(\"y\", pos.y - 5);\r\n        },\r\n\r\n        linkBuilder = function (link) {\r\n            return svg(\"line\").attr(\"stroke\", \"#999\");\r\n        },\r\n\r\n        linkPositionCallback = function (linkUI, fromPos, toPos) {\r\n            linkUI.attr(\"x1\", fromPos.x)\r\n                  .attr(\"y1\", fromPos.y)\r\n                  .attr(\"x2\", toPos.x)\r\n                  .attr(\"y2\", toPos.y);\r\n        },\r\n\r\n        fireRescaled = function (graphics) {\r\n            // TODO: maybe we shall copy changes?\r\n            graphics.fire(\"rescaled\");\r\n        },\r\n\r\n        cachedPos = {x : 0, y: 0},\r\n        cachedFromPos = {x : 0, y: 0},\r\n        cachedToPos = {x : 0, y: 0},\r\n\r\n        updateTransform = function () {\r\n            if (svgContainer) {\r\n                var transform = \"matrix(\" + actualScale + \", 0, 0,\" + actualScale + \",\" + offsetX + \",\" + offsetY + \")\";\r\n                svgContainer.attr(\"transform\", transform);\r\n            }\r\n        };\r\n\r\n    svgRoot = createSvgRoot();\r\n\r\n    var graphics = {\r\n        getNodeUI: function (nodeId) {\r\n            return allNodes[nodeId];\r\n        },\r\n\r\n        getLinkUI: function (linkId) {\r\n            return allLinks[linkId];\r\n        },\r\n\r\n        /**\r\n         * Sets the callback that creates node representation.\r\n         *\r\n         * @param builderCallback a callback function that accepts graph node\r\n         * as a parameter and must return an element representing this node.\r\n         *\r\n         * @returns If builderCallbackOrNode is a valid callback function, instance of this is returned;\r\n         * Otherwise undefined value is returned\r\n         */\r\n        node : function (builderCallback) {\r\n            if (typeof builderCallback !== \"function\") {\r\n                return; // todo: throw? This is not compatible with old versions\r\n            }\r\n\r\n            nodeBuilder = builderCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets the callback that creates link representation\r\n         *\r\n         * @param builderCallback a callback function that accepts graph link\r\n         * as a parameter and must return an element representing this link.\r\n         *\r\n         * @returns If builderCallback is a valid callback function, instance of this is returned;\r\n         * Otherwise undefined value is returned.\r\n         */\r\n        link : function (builderCallback) {\r\n            if (typeof builderCallback !== \"function\") {\r\n                return; // todo: throw? This is not compatible with old versions\r\n            }\r\n\r\n            linkBuilder = builderCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Allows to override default position setter for the node with a new\r\n         * function. newPlaceCallback(nodeUI, position, node) is function which\r\n         * is used by updateNodePosition().\r\n         */\r\n        placeNode : function (newPlaceCallback) {\r\n            nodePositionCallback = newPlaceCallback;\r\n            return this;\r\n        },\r\n\r\n        placeLink : function (newPlaceLinkCallback) {\r\n            linkPositionCallback = newPlaceLinkCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called every before renderer starts rendering.\r\n         */\r\n        beginRender : function () {},\r\n\r\n        /**\r\n         * Called every time when renderer finishes one step of rendering.\r\n         */\r\n        endRender : function () {},\r\n\r\n        /**\r\n         * Sets translate operation that should be applied to all nodes and links.\r\n         */\r\n        graphCenterChanged : function (x, y) {\r\n            offsetX = x;\r\n            offsetY = y;\r\n            updateTransform();\r\n        },\r\n\r\n        /**\r\n         * Default input manager listens to DOM events to process nodes drag-n-drop\r\n         */\r\n        inputManager : domInputManager,\r\n\r\n        translateRel : function (dx, dy) {\r\n            var p = svgRoot.createSVGPoint(),\r\n                t = svgContainer.getCTM(),\r\n                origin = svgRoot.createSVGPoint().matrixTransform(t.inverse());\r\n\r\n            p.x = dx;\r\n            p.y = dy;\r\n\r\n            p = p.matrixTransform(t.inverse());\r\n            p.x = (p.x - origin.x) * t.a;\r\n            p.y = (p.y - origin.y) * t.d;\r\n\r\n            t.e += p.x;\r\n            t.f += p.y;\r\n\r\n            var transform = \"matrix(\" + t.a + \", 0, 0,\" + t.d + \",\" + t.e + \",\" + t.f + \")\";\r\n            svgContainer.attr(\"transform\", transform);\r\n        },\r\n\r\n        scale : function (scaleFactor, scrollPoint) {\r\n            var p = svgRoot.createSVGPoint();\r\n            p.x = scrollPoint.x;\r\n            p.y = scrollPoint.y;\r\n\r\n            p = p.matrixTransform(svgContainer.getCTM().inverse()); // translate to SVG coordinates\r\n\r\n            // Compute new scale matrix in current mouse position\r\n            var k = svgRoot.createSVGMatrix().translate(p.x, p.y).scale(scaleFactor).translate(-p.x, -p.y),\r\n                t = svgContainer.getCTM().multiply(k);\r\n\r\n            actualScale = t.a;\r\n            offsetX = t.e;\r\n            offsetY = t.f;\r\n            var transform = \"matrix(\" + t.a + \", 0, 0,\" + t.d + \",\" + t.e + \",\" + t.f + \")\";\r\n            svgContainer.attr(\"transform\", transform);\r\n\r\n            fireRescaled(this);\r\n            return actualScale;\r\n        },\r\n\r\n        resetScale : function () {\r\n            actualScale = 1;\r\n            var transform = \"matrix(1, 0, 0, 1, 0, 0)\";\r\n            svgContainer.attr(\"transform\", transform);\r\n            fireRescaled(this);\r\n            return this;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider prepare to render.\r\n        */\r\n        init : function (container) {\r\n            container.appendChild(svgRoot);\r\n            updateTransform();\r\n            // Notify the world if someone waited for update. TODO: should send an event\r\n            if (typeof initCallback === \"function\") {\r\n                initCallback(svgRoot);\r\n            }\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider release occupied resources.\r\n        */\r\n        release : function (container) {\r\n            if (svgRoot && container) {\r\n                container.removeChild(svgRoot);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n         * provider prepare to render given link of the graph\r\n         *\r\n         * @param link - model of a link\r\n         */\r\n        addLink: function (link, pos) {\r\n            var linkUI = linkBuilder(link);\r\n            if (!linkUI) { return; }\r\n            linkUI.position = pos;\r\n            linkUI.link = link;\r\n            allLinks[link.id] = linkUI;\r\n            if (svgContainer.childElementCount > 0) {\r\n                svgContainer.insertBefore(linkUI, svgContainer.firstChild);\r\n            } else {\r\n                svgContainer.appendChild(linkUI);\r\n            }\r\n            return linkUI;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider remove link from rendering surface.\r\n        *\r\n        * @param linkUI visual representation of the link created by link() execution.\r\n        **/\r\n        releaseLink : function (link) {\r\n            var linkUI = allLinks[link.id];\r\n            if (linkUI) {\r\n                svgContainer.removeChild(linkUI);\r\n                delete allLinks[link.id];\r\n            }\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider prepare to render given node of the graph.\r\n        *\r\n        * @param nodeUI visual representation of the node created by node() execution.\r\n        **/\r\n        addNode : function (node, pos) {\r\n            var nodeUI = nodeBuilder(node);\r\n            if (!nodeUI) {\r\n                return;\r\n            }\r\n            nodeUI.position = pos;\r\n            nodeUI.node = node;\r\n            allNodes[node.id] = nodeUI;\r\n\r\n            svgContainer.appendChild(nodeUI);\r\n\r\n            return nodeUI;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider remove node from rendering surface.\r\n        *\r\n        * @param node graph's node\r\n        **/\r\n        releaseNode : function (node) {\r\n            var nodeUI = allNodes[node.id];\r\n            if (nodeUI) {\r\n                svgContainer.removeChild(nodeUI);\r\n                delete allNodes[node.id];\r\n            }\r\n        },\r\n\r\n        renderNodes : function () {\r\n            for (var key in allNodes) {\r\n                if (allNodes.hasOwnProperty(key)) {\r\n                    var nodeUI = allNodes[key];\r\n                    cachedPos.x = nodeUI.position.x;\r\n                    cachedPos.y = nodeUI.position.y;\r\n                    nodePositionCallback(nodeUI, cachedPos, nodeUI.node);\r\n                }\r\n            }\r\n        },\r\n\r\n        renderLinks : function () {\r\n            for (var key in allLinks) {\r\n                if (allLinks.hasOwnProperty(key)) {\r\n                    var linkUI = allLinks[key];\r\n                    cachedFromPos.x = linkUI.position.from.x;\r\n                    cachedFromPos.y = linkUI.position.from.y;\r\n                    cachedToPos.x = linkUI.position.to.x;\r\n                    cachedToPos.y = linkUI.position.to.y;\r\n                    linkPositionCallback(linkUI, cachedFromPos, cachedToPos, linkUI.link);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns root element which hosts graphics.\r\n         */\r\n        getGraphicsRoot : function (callbackWhenReady) {\r\n            // todo: should fire an event, instead of having this context.\r\n            if (typeof callbackWhenReady === \"function\") {\r\n                if (svgRoot) {\r\n                    callbackWhenReady(svgRoot);\r\n                } else {\r\n                    initCallback = callbackWhenReady;\r\n                }\r\n            }\r\n            return svgRoot;\r\n        },\r\n        /**\r\n         * Returns root SVG element.\r\n         *\r\n         * Note: This is internal method specific to this renderer\r\n         */\r\n        getSvgRoot : function () {\r\n            return svgRoot;\r\n        }\r\n    };\r\n\r\n\r\n    // Let graphics fire events before we return it to the caller.\r\n    eventify(graphics);\r\n\r\n    return graphics;\r\n\r\n    function createSvgRoot() {\r\n        var svgRoot = svg(\"svg\");\r\n\r\n        svgContainer = svg(\"g\")\r\n              .attr(\"buffered-rendering\", \"dynamic\");\r\n\r\n        svgRoot.appendChild(svgContainer);\r\n        return svgRoot;\r\n    }\r\n}\r\n\n},{\"../Input/domInputManager.js\":38,\"ngraph.events\":9,\"simplesvg\":32}],54:[function(require,module,exports){\n/**\r\n * @fileOverview Defines a graph renderer that uses WebGL based drawings.\r\n *\r\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\r\n */\r\n\r\nmodule.exports = webglGraphics;\r\n\r\nvar webglInputManager = require('../Input/webglInputManager.js');\r\nvar webglLinkProgram = require('../WebGL/webglLinkProgram.js');\r\nvar webglNodeProgram = require('../WebGL/webglNodeProgram.js');\r\nvar webglSquare = require('../WebGL/webglSquare.js');\r\nvar webglLine = require('../WebGL/webglLine.js');\r\nvar eventify = require('ngraph.events');\r\nvar merge = require('ngraph.merge');\r\n\r\n/**\r\n * Performs webgl-based graph rendering. This module does not perform\r\n * layout, but only visualizes nodes and edges of the graph.\r\n *\r\n * @param options - to customize graphics  behavior. Currently supported parameter\r\n *  enableBlending - true by default, allows to use transparency in node/links colors.\r\n *  preserveDrawingBuffer - false by default, tells webgl to preserve drawing buffer.\r\n *                    See https://www.khronos.org/registry/webgl/specs/1.0/#5.2\r\n */\r\n\r\nfunction webglGraphics(options) {\r\n    options = merge(options, {\r\n        enableBlending : true,\r\n        preserveDrawingBuffer : false,\r\n        clearColor: false,\r\n        clearColorValue : {\r\n            r : 1,\r\n            g : 1,\r\n            b : 1,\r\n            a : 1\r\n        }\r\n    });\r\n\r\n    var container,\r\n        graphicsRoot,\r\n        gl,\r\n        width,\r\n        height,\r\n        nodesCount = 0,\r\n        linksCount = 0,\r\n        transform = [\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ],\r\n        userPlaceNodeCallback,\r\n        userPlaceLinkCallback,\r\n        nodes = [],\r\n        links = [],\r\n        initCallback,\r\n\r\n        allNodes = {},\r\n        allLinks = {},\r\n        linkProgram = webglLinkProgram(),\r\n        nodeProgram = webglNodeProgram(),\r\n/*jshint unused: false */\r\n        nodeUIBuilder = function (node) {\r\n            return webglSquare(); // Just make a square, using provided gl context (a nodeProgram);\r\n        },\r\n\r\n        linkUIBuilder = function (link) {\r\n            return webglLine(0xb3b3b3ff);\r\n        },\r\n/*jshint unused: true */\r\n        updateTransformUniform = function () {\r\n            linkProgram.updateTransform(transform);\r\n            nodeProgram.updateTransform(transform);\r\n        },\r\n\r\n        resetScaleInternal = function () {\r\n            transform = [1, 0, 0, 0,\r\n                        0, 1, 0, 0,\r\n                        0, 0, 1, 0,\r\n                        0, 0, 0, 1];\r\n        },\r\n\r\n        updateSize = function () {\r\n            if (container && graphicsRoot) {\r\n                width = graphicsRoot.width = Math.max(container.offsetWidth, 1);\r\n                height = graphicsRoot.height = Math.max(container.offsetHeight, 1);\r\n                if (gl) { gl.viewport(0, 0, width, height); }\r\n                if (linkProgram) { linkProgram.updateSize(width / 2, height / 2); }\r\n                if (nodeProgram) { nodeProgram.updateSize(width / 2, height / 2); }\r\n            }\r\n        },\r\n\r\n        fireRescaled = function (graphics) {\r\n            graphics.fire(\"rescaled\");\r\n        };\r\n\r\n    graphicsRoot = window.document.createElement(\"canvas\");\r\n\r\n    var graphics = {\r\n        getLinkUI: function (linkId) {\r\n            return allLinks[linkId];\r\n        },\r\n\r\n        getNodeUI: function (nodeId) {\r\n            return allNodes[nodeId];\r\n        },\r\n\r\n        /**\r\n         * Sets the callback that creates node representation.\r\n         *\r\n         * @param builderCallback a callback function that accepts graph node\r\n         * as a parameter and must return an element representing this node.\r\n         *\r\n         * @returns If builderCallbackOrNode is a valid callback function, instance of this is returned;\r\n         * Otherwise undefined value is returned\r\n         */\r\n        node : function (builderCallback) {\r\n            if (typeof builderCallback !== \"function\") {\r\n                return; // todo: throw? This is not compatible with old versions\r\n            }\r\n\r\n            nodeUIBuilder = builderCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets the callback that creates link representation\r\n         *\r\n         * @param builderCallback a callback function that accepts graph link\r\n         * as a parameter and must return an element representing this link.\r\n         *\r\n         * @returns If builderCallback is a valid callback function, instance of this is returned;\r\n         * Otherwise undefined value is returned.\r\n         */\r\n        link : function (builderCallback) {\r\n            if (typeof builderCallback !== \"function\") {\r\n                return; // todo: throw? This is not compatible with old versions\r\n            }\r\n\r\n            linkUIBuilder = builderCallback;\r\n            return this;\r\n        },\r\n\r\n\r\n        /**\r\n         * Allows to override default position setter for the node with a new\r\n         * function. newPlaceCallback(nodeUI, position) is function which\r\n         * is used by updateNodePosition().\r\n         */\r\n        placeNode : function (newPlaceCallback) {\r\n            userPlaceNodeCallback = newPlaceCallback;\r\n            return this;\r\n        },\r\n\r\n        placeLink : function (newPlaceLinkCallback) {\r\n            userPlaceLinkCallback = newPlaceLinkCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Custom input manager listens to mouse events to process nodes drag-n-drop inside WebGL canvas\r\n         */\r\n        inputManager : webglInputManager,\r\n\r\n        /**\r\n         * Called every time before renderer starts rendering.\r\n         */\r\n        beginRender : function () {\r\n            // this function could be replaced by this.init,\r\n            // based on user options.\r\n        },\r\n\r\n        /**\r\n         * Called every time when renderer finishes one step of rendering.\r\n         */\r\n        endRender : function () {\r\n            if (linksCount > 0) {\r\n                linkProgram.render();\r\n            }\r\n            if (nodesCount > 0) {\r\n                nodeProgram.render();\r\n            }\r\n        },\r\n\r\n        bringLinkToFront : function (linkUI) {\r\n            var frontLinkId = linkProgram.getFrontLinkId(),\r\n                srcLinkId,\r\n                temp;\r\n\r\n            linkProgram.bringToFront(linkUI);\r\n\r\n            if (frontLinkId > linkUI.id) {\r\n                srcLinkId = linkUI.id;\r\n\r\n                temp = links[frontLinkId];\r\n                links[frontLinkId] = links[srcLinkId];\r\n                links[frontLinkId].id = frontLinkId;\r\n                links[srcLinkId] = temp;\r\n                links[srcLinkId].id = srcLinkId;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets translate operation that should be applied to all nodes and links.\r\n         */\r\n        graphCenterChanged : function (x, y) {\r\n            transform[12] = (2 * x / width) - 1;\r\n            transform[13] = 1 - (2 * y / height);\r\n            updateTransformUniform();\r\n        },\r\n\r\n        /**\r\n         * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n         * provider prepare to render given link of the graph\r\n         *\r\n         * @param link - model of a link\r\n         */\r\n        addLink: function (link, boundPosition) {\r\n            var uiid = linksCount++,\r\n                ui = linkUIBuilder(link);\r\n            ui.id = uiid;\r\n            ui.pos = boundPosition;\r\n\r\n            linkProgram.createLink(ui);\r\n\r\n            links[uiid] = ui;\r\n            allLinks[link.id] = ui;\r\n            return ui;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider prepare to render given node of the graph.\r\n        *\r\n        * @param nodeUI visual representation of the node created by node() execution.\r\n        **/\r\n        addNode : function (node, boundPosition) {\r\n            var uiid = nodesCount++,\r\n                ui = nodeUIBuilder(node);\r\n\r\n            ui.id = uiid;\r\n            ui.position = boundPosition;\r\n            ui.node = node;\r\n\r\n            nodeProgram.createNode(ui);\r\n\r\n            nodes[uiid] = ui;\r\n            allNodes[node.id] = ui;\r\n            return ui;\r\n        },\r\n\r\n        translateRel : function (dx, dy) {\r\n            transform[12] += (2 * transform[0] * dx / width) / transform[0];\r\n            transform[13] -= (2 * transform[5] * dy / height) / transform[5];\r\n            updateTransformUniform();\r\n        },\r\n\r\n        scale : function (scaleFactor, scrollPoint) {\r\n            // Transform scroll point to clip-space coordinates:\r\n            var cx = 2 * scrollPoint.x / width - 1,\r\n                cy = 1 - (2 * scrollPoint.y) / height;\r\n\r\n            cx -= transform[12];\r\n            cy -= transform[13];\r\n\r\n            transform[12] += cx * (1 - scaleFactor);\r\n            transform[13] += cy * (1 - scaleFactor);\r\n\r\n            transform[0] *= scaleFactor;\r\n            transform[5] *= scaleFactor;\r\n\r\n            updateTransformUniform();\r\n            fireRescaled(this);\r\n\r\n            return transform[0];\r\n        },\r\n\r\n        resetScale : function () {\r\n            resetScaleInternal();\r\n\r\n            if (gl) {\r\n                updateSize();\r\n                // TODO: what is this?\r\n                // gl.useProgram(linksProgram);\r\n                // gl.uniform2f(linksProgram.screenSize, width, height);\r\n                updateTransformUniform();\r\n            }\r\n            return this;\r\n        },\r\n\r\n       /**\r\n        * Resizes the graphic without resetting the scale. \r\n        * Useful with viva graph in a dynamic container\r\n        */\r\n        updateSize: updateSize,\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider prepare to render.\r\n        */\r\n        init : function (c) {\r\n            var contextParameters = {};\r\n\r\n            if (options.preserveDrawingBuffer) {\r\n                contextParameters.preserveDrawingBuffer = true;\r\n            }\r\n\r\n            container = c;\r\n\r\n            updateSize();\r\n            resetScaleInternal();\r\n            container.appendChild(graphicsRoot);\r\n\r\n\r\n            gl = graphicsRoot.getContext(\"experimental-webgl\", contextParameters);\r\n            if (!gl) {\r\n                var msg = \"Could not initialize WebGL. Seems like the browser doesn't support it.\";\r\n                window.alert(msg);\r\n                throw msg;\r\n            }\r\n            if (options.enableBlending) {\r\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n                gl.enable(gl.BLEND);\r\n            }\r\n            if (options.clearColor) {\r\n                var color = options.clearColorValue;\r\n                gl.clearColor(color.r, color.g, color.b, color.a);\r\n                // TODO: not the best way, really. Should come up with something better\r\n                // what if we need more updates inside beginRender, like depth buffer?\r\n                this.beginRender = function () {\r\n                    gl.clear(gl.COLOR_BUFFER_BIT);\r\n                };\r\n            }\r\n\r\n            linkProgram.load(gl);\r\n            linkProgram.updateSize(width / 2, height / 2);\r\n\r\n            nodeProgram.load(gl);\r\n            nodeProgram.updateSize(width / 2, height / 2);\r\n\r\n            updateTransformUniform();\r\n\r\n            // Notify the world if someone waited for update. TODO: should send an event\r\n            if (typeof initCallback === \"function\") {\r\n                initCallback(graphicsRoot);\r\n            }\r\n        },\r\n\r\n        /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider release occupied resources.\r\n        */\r\n        release : function (container) {\r\n            if (graphicsRoot && container) {\r\n                container.removeChild(graphicsRoot);\r\n                // TODO: anything else?\r\n            }\r\n        },\r\n\r\n       /**\r\n        * Checks whether webgl is supported by this browser.\r\n        */\r\n        isSupported : function () {\r\n            var c = window.document.createElement(\"canvas\"),\r\n                gl = c && c.getContext && c.getContext(\"experimental-webgl\");\r\n            return gl;\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider remove link from rendering surface.\r\n        *\r\n        * @param linkUI visual representation of the link created by link() execution.\r\n        **/\r\n        releaseLink : function (link) {\r\n            if (linksCount > 0) { linksCount -= 1; }\r\n            var linkUI = allLinks[link.id];\r\n            delete allLinks[link.id];\r\n\r\n            linkProgram.removeLink(linkUI);\r\n\r\n            var linkIdToRemove = linkUI.id;\r\n            if (linkIdToRemove < linksCount) {\r\n                if (linksCount === 0 || linksCount === linkIdToRemove) {\r\n                    return; // no more links or removed link is the last one.\r\n                }\r\n\r\n                var lastLinkUI = links[linksCount];\r\n                links[linkIdToRemove] = lastLinkUI;\r\n                lastLinkUI.id = linkIdToRemove;\r\n            }\r\n        },\r\n\r\n       /**\r\n        * Called by Viva.Graph.View.renderer to let concrete graphic output\r\n        * provider remove node from rendering surface.\r\n        *\r\n        * @param nodeUI visual representation of the node created by node() execution.\r\n        **/\r\n        releaseNode : function (node) {\r\n            if (nodesCount > 0) { nodesCount -= 1; }\r\n            var nodeUI = allNodes[node.id];\r\n            delete allNodes[node.id];\r\n\r\n            nodeProgram.removeNode(nodeUI);\r\n\r\n            var nodeIdToRemove = nodeUI.id;\r\n            if (nodeIdToRemove < nodesCount) {\r\n                if (nodesCount === 0 || nodesCount === nodeIdToRemove) {\r\n                    return; // no more nodes or removed node is the last in the list.\r\n                }\r\n\r\n                var lastNodeUI = nodes[nodesCount];\r\n\r\n                nodes[nodeIdToRemove] = lastNodeUI;\r\n                lastNodeUI.id = nodeIdToRemove;\r\n\r\n                // Since concrete shaders may cache properties in the UI element\r\n                // we are letting them to make this swap (e.g. image node shader\r\n                // uses this approach to update node's offset in the atlas)\r\n                nodeProgram.replaceProperties(nodeUI, lastNodeUI);\r\n            }\r\n        },\r\n\r\n        renderNodes: function () {\r\n            var pos = {x : 0, y : 0};\r\n            // WebGL coordinate system is different. Would be better\r\n            // to have this transform in the shader code, but it would\r\n            // require every shader to be updated..\r\n            for (var i = 0; i < nodesCount; ++i) {\r\n                var ui = nodes[i];\r\n                pos.x = ui.position.x;\r\n                pos.y = ui.position.y;\r\n                if (userPlaceNodeCallback) {\r\n                    userPlaceNodeCallback(ui, pos);\r\n                }\r\n\r\n                nodeProgram.position(ui, pos);\r\n            }\r\n        },\r\n\r\n        renderLinks: function () {\r\n            if (this.omitLinksRendering) { return; }\r\n\r\n            var toPos = {x : 0, y : 0};\r\n            var fromPos = {x : 0, y : 0};\r\n            for (var i = 0; i < linksCount; ++i) {\r\n                var ui = links[i];\r\n                var pos = ui.pos.from;\r\n                fromPos.x = pos.x;\r\n                fromPos.y = -pos.y;\r\n                pos = ui.pos.to;\r\n                toPos.x = pos.x;\r\n                toPos.y = -pos.y;\r\n                if (userPlaceLinkCallback) {\r\n                    userPlaceLinkCallback(ui, fromPos, toPos);\r\n                }\r\n\r\n                linkProgram.position(ui, fromPos, toPos);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns root element which hosts graphics.\r\n         */\r\n        getGraphicsRoot : function (callbackWhenReady) {\r\n            // todo: should fire an event, instead of having this context.\r\n            if (typeof callbackWhenReady === \"function\") {\r\n                if (graphicsRoot) {\r\n                    callbackWhenReady(graphicsRoot);\r\n                } else {\r\n                    initCallback = callbackWhenReady;\r\n                }\r\n            }\r\n            return graphicsRoot;\r\n        },\r\n\r\n        /**\r\n         * Updates default shader which renders nodes\r\n         *\r\n         * @param newProgram to use for nodes.\r\n         */\r\n        setNodeProgram : function (newProgram) {\r\n            if (!gl && newProgram) {\r\n                // Nothing created yet. Just set shader to the new one\r\n                // and let initialization logic take care about the rest.\r\n                nodeProgram = newProgram;\r\n            } else if (newProgram) {\r\n                throw \"Not implemented. Cannot swap shader on the fly... Yet.\";\r\n                // TODO: unload old shader and reinit.\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Updates default shader which renders links\r\n         *\r\n         * @param newProgram to use for links.\r\n         */\r\n        setLinkProgram : function (newProgram) {\r\n            if (!gl && newProgram) {\r\n                // Nothing created yet. Just set shader to the new one\r\n                // and let initialization logic take care about the rest.\r\n                linkProgram = newProgram;\r\n            } else if (newProgram) {\r\n                throw \"Not implemented. Cannot swap shader on the fly... Yet.\";\r\n                // TODO: unload old shader and reinit.\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Transforms client coordinates into layout coordinates. Client coordinates\r\n         * are DOM coordinates relative to the rendering container. Layout\r\n         * coordinates are those assigned by by layout algorithm to each node.\r\n         *\r\n         * @param {Object} p - a point object with `x` and `y` attributes.\r\n         * This method mutates p.\r\n         */\r\n        transformClientToGraphCoordinates: function (p) {\r\n          // TODO: could be a problem when container has margins?\r\n            // normalize\r\n            p.x = ((2 * p.x) / width) - 1;\r\n            p.y = 1 - ((2 * p.y) / height);\r\n\r\n            // apply transform\r\n            p.x = (p.x - transform[12]) / transform[0];\r\n            p.y = (p.y - transform[13]) / transform[5];\r\n\r\n            // transform to graph coordinates\r\n            p.x = p.x * (width / 2);\r\n            p.y = p.y * (-height / 2);\r\n\r\n            return p;\r\n        },\r\n\r\n        /**\r\n         * Transforms WebGL coordinates into client coordinates. Reverse of \r\n         * `transformClientToGraphCoordinates()`\r\n         *\r\n         * @param {Object} p - a point object with `x` and `y` attributes, which\r\n         * represents a layout coordinate. This method mutates p.\r\n         */\r\n        transformGraphToClientCoordinates: function (p) {\r\n          // TODO: could be a problem when container has margins?\r\n            // transform from graph coordinates\r\n            p.x = p.x / (width / 2);\r\n            p.y = p.y / (-height / 2);\r\n\r\n            // apply transform\r\n            p.x = (p.x * transform[0]) + transform[12];\r\n            p.y = (p.y * transform[5]) + transform[13];\r\n\r\n            // denormalize\r\n            p.x = ((p.x + 1) * width) / 2;\r\n            p.y = ((1 - p.y) * height) / 2;\r\n\r\n            return p;\r\n        },\r\n\r\n        getNodeAtClientPos: function (clientPos, preciseCheck) {\r\n            if (typeof preciseCheck !== \"function\") {\r\n                // we don't know anything about your node structure here :(\r\n                // potentially this could be delegated to node program, but for\r\n                // right now, we are giving up if you don't pass boundary check\r\n                // callback. It answers to a question is nodeUI covers  (x, y)\r\n                return null;\r\n            }\r\n            // first transform to graph coordinates:\r\n            this.transformClientToGraphCoordinates(clientPos);\r\n            // now using precise check iterate over each node and find one within box:\r\n            // TODO: This is poor O(N) performance.\r\n            for (var i = 0; i < nodesCount; ++i) {\r\n                if (preciseCheck(nodes[i], clientPos.x, clientPos.y)) {\r\n                    return nodes[i].node;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n\r\n    // Let graphics fire events before we return it to the caller.\r\n    eventify(graphics);\r\n\r\n    return graphics;\r\n}\r\n\n},{\"../Input/webglInputManager.js\":40,\"../WebGL/webglLine.js\":62,\"../WebGL/webglLinkProgram.js\":63,\"../WebGL/webglNodeProgram.js\":64,\"../WebGL/webglSquare.js\":65,\"ngraph.events\":9,\"ngraph.merge\":17}],55:[function(require,module,exports){\nmodule.exports = parseColor;\n\nfunction parseColor(color) {\n  var parsedColor = 0x009ee8ff;\n\n  if (typeof color === 'string' && color) {\n    if (color.length === 4) { // #rgb\n      color = color.replace(/([^#])/g, '$1$1'); // duplicate each letter except first #.\n    }\n    if (color.length === 9) { // #rrggbbaa\n      parsedColor = parseInt(color.substr(1), 16);\n    } else if (color.length === 7) { // or #rrggbb.\n      parsedColor = (parseInt(color.substr(1), 16) << 8) | 0xff;\n    } else {\n      throw 'Color expected in hex format with preceding \"#\". E.g. #00ff00. Got value: ' + color;\n    }\n  } else if (typeof color === 'number') {\n    parsedColor = color;\n  }\n\n  return parsedColor;\n}\n\n},{}],56:[function(require,module,exports){\nmodule.exports = Texture;\n\n/**\n * Single texture in the webglAtlas.\n */\nfunction Texture(size) {\n  this.canvas = window.document.createElement(\"canvas\");\n  this.ctx = this.canvas.getContext(\"2d\");\n  this.isDirty = false;\n  this.canvas.width = this.canvas.height = size;\n}\n\n},{}],57:[function(require,module,exports){\n/**\n * @fileOverview Utility functions for webgl rendering.\n *\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\n */\n\nmodule.exports = webgl;\n\nfunction webgl(gl) {\n\n  return {\n    createProgram: createProgram,\n    extendArray: extendArray,\n    copyArrayPart: copyArrayPart,\n    swapArrayPart: swapArrayPart,\n    getLocations: getLocations,\n    context: gl\n  };\n\n  function createShader(shaderText, type) {\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, shaderText);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      var msg = gl.getShaderInfoLog(shader);\n      window.alert(msg);\n      throw msg;\n    }\n\n    return shader;\n  }\n\n  function createProgram(vertexShaderSrc, fragmentShaderSrc) {\n    var program = gl.createProgram();\n    var vs = createShader(vertexShaderSrc, gl.VERTEX_SHADER);\n    var fs = createShader(fragmentShaderSrc, gl.FRAGMENT_SHADER);\n\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      var msg = gl.getShaderInfoLog(program);\n      window.alert(msg);\n      throw msg;\n    }\n\n    return program;\n  }\n\n  function extendArray(buffer, itemsInBuffer, elementsPerItem) {\n    if ((itemsInBuffer + 1) * elementsPerItem > buffer.length) {\n      // Every time we run out of space create new array twice bigger.\n      // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs\n      var extendedArray = new Float32Array(buffer.length * elementsPerItem * 2);\n      extendedArray.set(buffer);\n\n      return extendedArray;\n    }\n\n    return buffer;\n  }\n\n  function getLocations(program, uniformOrAttributeNames) {\n    var foundLocations = {};\n    for (var i = 0; i < uniformOrAttributeNames.length; ++i) {\n      var name = uniformOrAttributeNames[i];\n      var location = -1;\n      if (name[0] === 'a' && name[1] === '_') {\n        location = gl.getAttribLocation(program, name);\n        if (location === -1) {\n          throw new Error(\"Program doesn't have required attribute: \" + name);\n        }\n\n        foundLocations[name.slice(2)] = location;\n      } else if (name[0] === 'u' && name[1] === '_') {\n        location = gl.getUniformLocation(program, name);\n        if (location === null) {\n          throw new Error(\"Program doesn't have required uniform: \" + name);\n        }\n\n        foundLocations[name.slice(2)] = location;\n      } else {\n        throw new Error(\"Couldn't figure out your intent. All uniforms should start with 'u_' prefix, and attributes with 'a_'\");\n      }\n    }\n\n    return foundLocations;\n  }\n}\n\nfunction copyArrayPart(array, to, from, elementsCount) {\n  for (var i = 0; i < elementsCount; ++i) {\n    array[to + i] = array[from + i];\n  }\n}\n\nfunction swapArrayPart(array, from, to, elementsCount) {\n  for (var i = 0; i < elementsCount; ++i) {\n    var tmp = array[from + i];\n    array[from + i] = array[to + i];\n    array[to + i] = tmp;\n  }\n}\n\n},{}],58:[function(require,module,exports){\nvar Texture = require('./texture.js');\n\nmodule.exports = webglAtlas;\n\n/**\n * My naive implementation of textures atlas. It allows clients to load\n * multiple images into atlas and get canvas representing all of them.\n *\n * @param tilesPerTexture - indicates how many images can be loaded to one\n *          texture of the atlas. If number of loaded images exceeds this\n *          parameter a new canvas will be created.\n */\nfunction webglAtlas(tilesPerTexture) {\n  var tilesPerRow = Math.sqrt(tilesPerTexture || 1024) << 0,\n    tileSize = tilesPerRow,\n    lastLoadedIdx = 1,\n    loadedImages = {},\n    dirtyTimeoutId,\n    skipedDirty = 0,\n    textures = [],\n    trackedUrls = [];\n\n  if (!isPowerOf2(tilesPerTexture)) {\n    throw \"Tiles per texture should be power of two.\";\n  }\n\n  // this is the return object\n  var api = {\n    /**\n     * indicates whether atlas has changed texture in it. If true then\n     * some of the textures has isDirty flag set as well.\n     */\n    isDirty: false,\n\n    /**\n     * Clears any signs of atlas changes.\n     */\n    clearDirty: clearDirty,\n\n    /**\n     * Removes given url from collection of tiles in the atlas.\n     */\n    remove: remove,\n\n    /**\n     * Gets all textures in the atlas.\n     */\n    getTextures: getTextures,\n\n    /**\n     * Gets coordinates of the given image in the atlas. Coordinates is an object:\n     * {offset : int } - where offset is an absolute position of the image in the\n     * atlas.\n     *\n     * Absolute means it can be larger than tilesPerTexture parameter, and in that\n     * case clients should get next texture in getTextures() collection.\n     */\n    getCoordinates: getCoordinates,\n\n    /**\n     * Asynchronously Loads the image to the atlas. Cross-domain security\n     * limitation applies.\n     */\n    load: load\n  };\n\n  return api;\n\n  function clearDirty() {\n    var i;\n    api.isDirty = false;\n    for (i = 0; i < textures.length; ++i) {\n      textures[i].isDirty = false;\n    }\n  }\n\n  function remove(imgUrl) {\n    var coordinates = loadedImages[imgUrl];\n    if (!coordinates) {\n      return false;\n    }\n    delete loadedImages[imgUrl];\n    lastLoadedIdx -= 1;\n\n\n    if (lastLoadedIdx === coordinates.offset) {\n      return true; // Ignore if it's last image in the whole set.\n    }\n\n    var tileToRemove = getTileCoordinates(coordinates.offset),\n      lastTileInSet = getTileCoordinates(lastLoadedIdx);\n\n    copy(lastTileInSet, tileToRemove);\n\n    var replacedOffset = loadedImages[trackedUrls[lastLoadedIdx]];\n    replacedOffset.offset = coordinates.offset;\n    trackedUrls[coordinates.offset] = trackedUrls[lastLoadedIdx];\n\n    markDirty();\n    return true;\n  }\n\n  function getTextures() {\n    return textures; // I trust you...\n  }\n\n  function getCoordinates(imgUrl) {\n    return loadedImages[imgUrl];\n  }\n\n  function load(imgUrl, callback) {\n    if (loadedImages.hasOwnProperty(imgUrl)) {\n      callback(loadedImages[imgUrl]);\n    } else {\n      var img = new window.Image(),\n        imgId = lastLoadedIdx;\n\n      lastLoadedIdx += 1;\n      img.crossOrigin = \"anonymous\";\n      img.onload = function() {\n        markDirty();\n        drawAt(imgId, img, callback);\n      };\n\n      img.src = imgUrl;\n    }\n  }\n\n  function createTexture() {\n    var texture = new Texture(tilesPerRow * tileSize);\n    textures.push(texture);\n  }\n\n  function drawAt(tileNumber, img, callback) {\n    var tilePosition = getTileCoordinates(tileNumber),\n      coordinates = {\n        offset: tileNumber\n      };\n\n    if (tilePosition.textureNumber >= textures.length) {\n      createTexture();\n    }\n    var currentTexture = textures[tilePosition.textureNumber];\n\n    currentTexture.ctx.drawImage(img, tilePosition.col * tileSize, tilePosition.row * tileSize, tileSize, tileSize);\n    trackedUrls[tileNumber] = img.src;\n\n    loadedImages[img.src] = coordinates;\n    currentTexture.isDirty = true;\n\n    callback(coordinates);\n  }\n\n  function getTileCoordinates(absolutePosition) {\n    var textureNumber = (absolutePosition / tilesPerTexture) << 0,\n      localTileNumber = (absolutePosition % tilesPerTexture),\n      row = (localTileNumber / tilesPerRow) << 0,\n      col = (localTileNumber % tilesPerRow);\n\n    return {\n      textureNumber: textureNumber,\n      row: row,\n      col: col\n    };\n  }\n\n  function markDirtyNow() {\n    api.isDirty = true;\n    skipedDirty = 0;\n    dirtyTimeoutId = null;\n  }\n\n  function markDirty() {\n    // delay this call, since it results in texture reload\n    if (dirtyTimeoutId) {\n      window.clearTimeout(dirtyTimeoutId);\n      skipedDirty += 1;\n      dirtyTimeoutId = null;\n    }\n\n    if (skipedDirty > 10) {\n      markDirtyNow();\n    } else {\n      dirtyTimeoutId = window.setTimeout(markDirtyNow, 400);\n    }\n  }\n\n  function copy(from, to) {\n    var fromCanvas = textures[from.textureNumber].canvas,\n      toCtx = textures[to.textureNumber].ctx,\n      x = to.col * tileSize,\n      y = to.row * tileSize;\n\n    toCtx.drawImage(fromCanvas, from.col * tileSize, from.row * tileSize, tileSize, tileSize, x, y, tileSize, tileSize);\n    textures[from.textureNumber].isDirty = true;\n    textures[to.textureNumber].isDirty = true;\n  }\n}\n\nfunction isPowerOf2(n) {\n  return (n & (n - 1)) === 0;\n}\n\n},{\"./texture.js\":56}],59:[function(require,module,exports){\nmodule.exports = webglImage;\n\n/**\n * Represents a model for image.\n */\nfunction webglImage(size, src) {\n    return {\n        /**\n         * Gets texture index where current image is placed.\n         */\n        _texture : 0,\n\n        /**\n         * Gets offset in the texture where current image is placed.\n         */\n        _offset : 0,\n\n        /**\n         * Gets size of the square with the image.\n         */\n        size : typeof size === 'number' ? size : 32,\n\n        /**\n         * Source of the image. If image is coming not from your domain\n         * certain origin restrictions applies.\n         * See http://www.khronos.org/registry/webgl/specs/latest/#4.2 for more details.\n         */\n        src  : src\n    };\n}\n\n},{}],60:[function(require,module,exports){\n/**\n * @fileOverview Defines an image nodes for webglGraphics class.\n * Shape of nodes is square.\n *\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\n */\n\nvar WebglAtlas = require('./webglAtlas.js');\nvar glUtils = require('./webgl.js');\n\nmodule.exports = webglImageNodeProgram;\n\n/**\n * Defines simple UI for nodes in webgl renderer. Each node is rendered as an image.\n */\nfunction webglImageNodeProgram() {\n  // WebGL is gian state machine, we store some properties of the state here:\n  var ATTRIBUTES_PER_PRIMITIVE = 18;\n  var nodesFS = createNodeFragmentShader();\n  var nodesVS = createNodeVertexShader();\n  var tilesPerTexture = 1024; // TODO: Get based on max texture size\n  var atlas;\n  var program;\n  var gl;\n  var buffer;\n  var utils;\n  var locations;\n  var nodesCount = 0;\n  var nodes = new Float32Array(64);\n  var width;\n  var height;\n  var transform;\n  var sizeDirty;\n\n\n  return {\n    load: load,\n\n    /**\n     * Updates position of current node in the buffer of nodes.\n     *\n     * @param idx - index of current node.\n     * @param pos - new position of the node.\n     */\n    position: position,\n\n    createNode: createNode,\n\n    removeNode: removeNode,\n\n    replaceProperties: replaceProperties,\n\n    updateTransform: updateTransform,\n\n    updateSize: updateSize,\n\n    render: render\n  };\n\n  function refreshTexture(texture, idx) {\n    if (texture.nativeObject) {\n      gl.deleteTexture(texture.nativeObject);\n    }\n\n    var nativeObject = gl.createTexture();\n    gl.activeTexture(gl[\"TEXTURE\" + idx]);\n    gl.bindTexture(gl.TEXTURE_2D, nativeObject);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.canvas);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\n\n    gl.generateMipmap(gl.TEXTURE_2D);\n    gl.uniform1i(locations[\"sampler\" + idx], idx);\n\n    texture.nativeObject = nativeObject;\n  }\n\n  function ensureAtlasTextureUpdated() {\n    if (atlas.isDirty) {\n      var textures = atlas.getTextures(),\n        i;\n      for (i = 0; i < textures.length; ++i) {\n        if (textures[i].isDirty || !textures[i].nativeObject) {\n          refreshTexture(textures[i], i);\n        }\n      }\n\n      atlas.clearDirty();\n    }\n  }\n\n  function load(glContext) {\n    gl = glContext;\n    utils = glUtils(glContext);\n\n    atlas = new WebglAtlas(tilesPerTexture);\n\n    program = utils.createProgram(nodesVS, nodesFS);\n    gl.useProgram(program);\n    locations = utils.getLocations(program, [\"a_vertexPos\", \"a_customAttributes\", \"u_screenSize\", \"u_transform\", \"u_sampler0\", \"u_sampler1\", \"u_sampler2\", \"u_sampler3\", \"u_tilesPerTexture\"]);\n\n    gl.uniform1f(locations.tilesPerTexture, tilesPerTexture);\n\n    gl.enableVertexAttribArray(locations.vertexPos);\n    gl.enableVertexAttribArray(locations.customAttributes);\n\n    buffer = gl.createBuffer();\n  }\n\n  function position(nodeUI, pos) {\n    var idx = nodeUI.id * ATTRIBUTES_PER_PRIMITIVE;\n    nodes[idx] = pos.x - nodeUI.size;\n    nodes[idx + 1] = pos.y - nodeUI.size;\n    nodes[idx + 2] = nodeUI._offset * 4;\n\n    nodes[idx + 3] = pos.x + nodeUI.size;\n    nodes[idx + 4] = pos.y - nodeUI.size;\n    nodes[idx + 5] = nodeUI._offset * 4 + 1;\n\n    nodes[idx + 6] = pos.x - nodeUI.size;\n    nodes[idx + 7] = pos.y + nodeUI.size;\n    nodes[idx + 8] = nodeUI._offset * 4 + 2;\n\n    nodes[idx + 9] = pos.x - nodeUI.size;\n    nodes[idx + 10] = pos.y + nodeUI.size;\n    nodes[idx + 11] = nodeUI._offset * 4 + 2;\n\n    nodes[idx + 12] = pos.x + nodeUI.size;\n    nodes[idx + 13] = pos.y - nodeUI.size;\n    nodes[idx + 14] = nodeUI._offset * 4 + 1;\n\n    nodes[idx + 15] = pos.x + nodeUI.size;\n    nodes[idx + 16] = pos.y + nodeUI.size;\n    nodes[idx + 17] = nodeUI._offset * 4 + 3;\n  }\n\n  function createNode(ui) {\n    nodes = utils.extendArray(nodes, nodesCount, ATTRIBUTES_PER_PRIMITIVE);\n    nodesCount += 1;\n\n    var coordinates = atlas.getCoordinates(ui.src);\n    if (coordinates) {\n      ui._offset = coordinates.offset;\n    } else {\n      ui._offset = 0;\n      // Image is not yet loaded into the atlas. Reload it:\n      atlas.load(ui.src, function(coordinates) {\n        ui._offset = coordinates.offset;\n      });\n    }\n  }\n\n  function removeNode(nodeUI) {\n    if (nodesCount > 0) {\n      nodesCount -= 1;\n    }\n\n    if (nodeUI.id < nodesCount && nodesCount > 0) {\n      if (nodeUI.src) {\n        atlas.remove(nodeUI.src);\n      }\n\n      utils.copyArrayPart(nodes, nodeUI.id * ATTRIBUTES_PER_PRIMITIVE, nodesCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\n    }\n  }\n\n  function replaceProperties(replacedNode, newNode) {\n    newNode._offset = replacedNode._offset;\n  }\n\n  function updateTransform(newTransform) {\n    sizeDirty = true;\n    transform = newTransform;\n  }\n\n  function updateSize(w, h) {\n    width = w;\n    height = h;\n    sizeDirty = true;\n  }\n\n  function render() {\n    gl.useProgram(program);\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, nodes, gl.DYNAMIC_DRAW);\n\n    if (sizeDirty) {\n      sizeDirty = false;\n      gl.uniformMatrix4fv(locations.transform, false, transform);\n      gl.uniform2f(locations.screenSize, width, height);\n    }\n\n    gl.vertexAttribPointer(locations.vertexPos, 2, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);\n    gl.vertexAttribPointer(locations.customAttributes, 1, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 2 * 4);\n\n    ensureAtlasTextureUpdated();\n\n    gl.drawArrays(gl.TRIANGLES, 0, nodesCount * 6);\n  }\n}\n\n// TODO: Use glslify for shaders\nfunction createNodeFragmentShader() {\n  return [\n    \"precision mediump float;\",\n    \"varying vec4 color;\",\n    \"varying vec3 vTextureCoord;\",\n    \"uniform sampler2D u_sampler0;\",\n    \"uniform sampler2D u_sampler1;\",\n    \"uniform sampler2D u_sampler2;\",\n    \"uniform sampler2D u_sampler3;\",\n\n    \"void main(void) {\",\n    \"   if (vTextureCoord.z == 0.) {\",\n    \"     gl_FragColor = texture2D(u_sampler0, vTextureCoord.xy);\",\n    \"   } else if (vTextureCoord.z == 1.) {\",\n    \"     gl_FragColor = texture2D(u_sampler1, vTextureCoord.xy);\",\n    \"   } else if (vTextureCoord.z == 2.) {\",\n    \"     gl_FragColor = texture2D(u_sampler2, vTextureCoord.xy);\",\n    \"   } else if (vTextureCoord.z == 3.) {\",\n    \"     gl_FragColor = texture2D(u_sampler3, vTextureCoord.xy);\",\n    \"   } else { gl_FragColor = vec4(0, 1, 0, 1); }\",\n    \"}\"\n  ].join(\"\\n\");\n}\n\nfunction createNodeVertexShader() {\n  return [\n    \"attribute vec2 a_vertexPos;\",\n\n    \"attribute float a_customAttributes;\",\n    \"uniform vec2 u_screenSize;\",\n    \"uniform mat4 u_transform;\",\n    \"uniform float u_tilesPerTexture;\",\n    \"varying vec3 vTextureCoord;\",\n\n    \"void main(void) {\",\n    \"   gl_Position = u_transform * vec4(a_vertexPos/u_screenSize, 0, 1);\",\n    \"float corner = mod(a_customAttributes, 4.);\",\n    \"float tileIndex = mod(floor(a_customAttributes / 4.), u_tilesPerTexture);\",\n    \"float tilesPerRow = sqrt(u_tilesPerTexture);\",\n    \"float tileSize = 1./tilesPerRow;\",\n    \"float tileColumn = mod(tileIndex, tilesPerRow);\",\n    \"float tileRow = floor(tileIndex/tilesPerRow);\",\n\n    \"if(corner == 0.0) {\",\n    \"  vTextureCoord.xy = vec2(0, 1);\",\n    \"} else if(corner == 1.0) {\",\n    \"  vTextureCoord.xy = vec2(1, 1);\",\n    \"} else if(corner == 2.0) {\",\n    \"  vTextureCoord.xy = vec2(0, 0);\",\n    \"} else {\",\n    \"  vTextureCoord.xy = vec2(1, 0);\",\n    \"}\",\n\n    \"vTextureCoord *= tileSize;\",\n    \"vTextureCoord.x += tileColumn * tileSize;\",\n    \"vTextureCoord.y += tileRow * tileSize;\",\n    \"vTextureCoord.z = floor(floor(a_customAttributes / 4.)/u_tilesPerTexture);\",\n    \"}\"\n  ].join(\"\\n\");\n}\n\n},{\"./webgl.js\":57,\"./webglAtlas.js\":58}],61:[function(require,module,exports){\nvar documentEvents = require('../Utils/documentEvents.js');\n\nmodule.exports = webglInputEvents;\n\n/**\n * Monitors graph-related mouse input in webgl graphics and notifies subscribers.\n *\n * @param {Viva.Graph.View.webglGraphics} webglGraphics\n */\nfunction webglInputEvents(webglGraphics) {\n  if (webglGraphics.webglInputEvents) {\n    // Don't listen twice, if we are already attached to this graphics:\n    return webglGraphics.webglInputEvents;\n  }\n\n  var mouseCapturedNode = null,\n    mouseEnterCallback = [],\n    mouseLeaveCallback = [],\n    mouseDownCallback = [],\n    mouseUpCallback = [],\n    mouseMoveCallback = [],\n    clickCallback = [],\n    dblClickCallback = [],\n    prevSelectStart,\n    boundRect;\n\n  var root = webglGraphics.getGraphicsRoot();\n  startListen(root);\n\n  var api = {\n    mouseEnter: mouseEnter,\n    mouseLeave: mouseLeave,\n    mouseDown: mouseDown,\n    mouseUp: mouseUp,\n    mouseMove: mouseMove,\n    click: click,\n    dblClick: dblClick,\n    mouseCapture: mouseCapture,\n    releaseMouseCapture: releaseMouseCapture\n  };\n\n  // TODO I don't remember why this is needed:\n  webglGraphics.webglInputEvents = api;\n\n  return api;\n\n  function releaseMouseCapture() {\n    mouseCapturedNode = null;\n  }\n\n  function mouseCapture(node) {\n    mouseCapturedNode = node;\n  }\n\n  function dblClick(callback) {\n    if (typeof callback === 'function') {\n      dblClickCallback.push(callback);\n    }\n    return api;\n  }\n\n  function click(callback) {\n    if (typeof callback === 'function') {\n      clickCallback.push(callback);\n    }\n    return api;\n  }\n\n  function mouseMove(callback) {\n    if (typeof callback === 'function') {\n      mouseMoveCallback.push(callback);\n    }\n    return api;\n  }\n\n  function mouseUp(callback) {\n    if (typeof callback === 'function') {\n      mouseUpCallback.push(callback);\n    }\n    return api;\n  }\n\n  function mouseDown(callback) {\n    if (typeof callback === 'function') {\n      mouseDownCallback.push(callback);\n    }\n    return api;\n  }\n\n  function mouseLeave(callback) {\n    if (typeof callback === 'function') {\n      mouseLeaveCallback.push(callback);\n    }\n    return api;\n  }\n\n  function mouseEnter(callback) {\n    if (typeof callback === 'function') {\n      mouseEnterCallback.push(callback);\n    }\n    return api;\n  }\n\n  function preciseCheck(nodeUI, x, y) {\n    if (nodeUI && nodeUI.size) {\n      var pos = nodeUI.position,\n        half = nodeUI.size;\n\n      return pos.x - half < x && x < pos.x + half &&\n        pos.y - half < y && y < pos.y + half;\n    }\n\n    return true;\n  }\n\n  function getNodeAtClientPos(pos) {\n    return webglGraphics.getNodeAtClientPos(pos, preciseCheck);\n  }\n\n  function stopPropagation(e) {\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    } else {\n      e.cancelBubble = true;\n    }\n  }\n\n  function handleDisabledEvent(e) {\n    stopPropagation(e);\n    return false;\n  }\n\n  function invoke(callbacksChain, args) {\n    var i, stopPropagation;\n    for (i = 0; i < callbacksChain.length; i += 1) {\n      stopPropagation = callbacksChain[i].apply(undefined, args);\n      if (stopPropagation) {\n        return true;\n      }\n    }\n  }\n\n  function startListen(root) {\n    var pos = {\n        x: 0,\n        y: 0\n      },\n      lastFound = null,\n      lastUpdate = 1,\n      lastClickTime = +new Date(),\n\n      handleMouseMove = function(e) {\n        invoke(mouseMoveCallback, [lastFound, e]);\n        pos.x = e.clientX;\n        pos.y = e.clientY;\n      },\n\n      handleMouseUp = function() {\n        documentEvents.off('mousemove', handleMouseMove);\n        documentEvents.off('mouseup', handleMouseUp);\n      },\n\n      updateBoundRect = function() {\n        boundRect = root.getBoundingClientRect();\n      };\n\n    window.addEventListener('resize', updateBoundRect);\n    updateBoundRect();\n\n    // mouse move inside container serves only to track mouse enter/leave events.\n    root.addEventListener('mousemove',\n      function(e) {\n        if (mouseCapturedNode) {\n          return;\n        }\n        if (lastUpdate++ % 7 === 0) {\n          // since there is no bullet proof method to detect resize\n          // event, we preemptively update the bounding rectangle\n          updateBoundRect();\n          lastUpdate = 1;\n        }\n        var cancelBubble = false,\n          node;\n\n        pos.x = e.clientX - boundRect.left;\n        pos.y = e.clientY - boundRect.top;\n\n        node = getNodeAtClientPos(pos);\n\n        if (node && lastFound !== node) {\n          lastFound = node;\n          cancelBubble = cancelBubble || invoke(mouseEnterCallback, [lastFound]);\n        } else if (node === null && lastFound !== node) {\n          cancelBubble = cancelBubble || invoke(mouseLeaveCallback, [lastFound]);\n          lastFound = null;\n        }\n\n        if (cancelBubble) {\n          stopPropagation(e);\n        }\n      });\n\n    root.addEventListener('mousedown',\n      function(e) {\n        var cancelBubble = false,\n          args;\n        updateBoundRect();\n        pos.x = e.clientX - boundRect.left;\n        pos.y = e.clientY - boundRect.top;\n\n        args = [getNodeAtClientPos(pos), e];\n        if (args[0]) {\n          cancelBubble = invoke(mouseDownCallback, args);\n          // we clicked on a node. Following drag should be handled on document events:\n          documentEvents.on('mousemove', handleMouseMove);\n          documentEvents.on('mouseup', handleMouseUp);\n\n          prevSelectStart = window.document.onselectstart;\n\n          window.document.onselectstart = handleDisabledEvent;\n\n          lastFound = args[0];\n        } else {\n          lastFound = null;\n        }\n        if (cancelBubble) {\n          stopPropagation(e);\n        }\n      });\n\n    root.addEventListener('mouseup',\n      function(e) {\n        var clickTime = +new Date(),\n          args;\n\n        pos.x = e.clientX - boundRect.left;\n        pos.y = e.clientY - boundRect.top;\n\n        var nodeAtClientPos = getNodeAtClientPos(pos);\n        var sameNode = nodeAtClientPos === lastFound;\n        args = [nodeAtClientPos || lastFound, e];\n        if (args[0]) {\n          window.document.onselectstart = prevSelectStart;\n\n          if (clickTime - lastClickTime < 400 && sameNode) {\n            invoke(dblClickCallback, args);\n          } else {\n            invoke(clickCallback, args);\n          }\n          lastClickTime = clickTime;\n\n          if (invoke(mouseUpCallback, args)) {\n            stopPropagation(e);\n          }\n        }\n      });\n  }\n}\n\n},{\"../Utils/documentEvents.js\":44}],62:[function(require,module,exports){\nvar parseColor = require('./parseColor.js');\n\nmodule.exports = webglLine;\n\n/**\n * Defines a webgl line. This class has no rendering logic at all,\n * it's just passed to corresponding shader and the shader should\n * figure out how to render it.\n *\n */\nfunction webglLine(color) {\n  return {\n    /**\n     * Gets or sets color of the line. If you set this property externally\n     * make sure it always come as integer of 0xRRGGBBAA format\n     */\n    color: parseColor(color)\n  };\n}\n\n},{\"./parseColor.js\":55}],63:[function(require,module,exports){\n/**\n * @fileOverview Defines a naive form of links for webglGraphics class.\n * This form allows to change color of links.\n **/\n\nvar glUtils = require('./webgl.js');\n\nmodule.exports = webglLinkProgram;\n\n/**\n * Defines UI for links in webgl renderer.\n */\nfunction webglLinkProgram() {\n    var ATTRIBUTES_PER_PRIMITIVE = 6, // primitive is Line with two points. Each has x,y and color = 3 * 2 attributes.\n        BYTES_PER_LINK = 2 * (2 * Float32Array.BYTES_PER_ELEMENT + Uint32Array.BYTES_PER_ELEMENT), // two nodes * (x, y + color)\n        linksFS = [\n            'precision mediump float;',\n            'varying vec4 color;',\n            'void main(void) {',\n            '   gl_FragColor = color;',\n            '}'\n        ].join('\\n'),\n\n        linksVS = [\n            'attribute vec2 a_vertexPos;',\n            'attribute vec4 a_color;',\n\n            'uniform vec2 u_screenSize;',\n            'uniform mat4 u_transform;',\n\n            'varying vec4 color;',\n\n            'void main(void) {',\n            '   gl_Position = u_transform * vec4(a_vertexPos/u_screenSize, 0.0, 1.0);',\n            '   color = a_color.abgr;',\n            '}'\n        ].join('\\n'),\n\n        program,\n        gl,\n        buffer,\n        utils,\n        locations,\n        linksCount = 0,\n        frontLinkId, // used to track z-index of links.\n        storage = new ArrayBuffer(16 * BYTES_PER_LINK),\n        positions = new Float32Array(storage),\n        colors = new Uint32Array(storage),\n        width,\n        height,\n        transform,\n        sizeDirty,\n\n        ensureEnoughStorage = function () {\n            // TODO: this is a duplicate of webglNodeProgram code. Extract it to webgl.js\n            if ((linksCount+1)*BYTES_PER_LINK > storage.byteLength) {\n                // Every time we run out of space create new array twice bigger.\n                // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs\n                var extendedStorage = new ArrayBuffer(storage.byteLength * 2),\n                    extendedPositions = new Float32Array(extendedStorage),\n                    extendedColors = new Uint32Array(extendedStorage);\n\n                extendedColors.set(colors); // should be enough to copy just one view.\n                positions = extendedPositions;\n                colors = extendedColors;\n                storage = extendedStorage;\n            }\n        };\n\n    return {\n        load : function (glContext) {\n            gl = glContext;\n            utils = glUtils(glContext);\n\n            program = utils.createProgram(linksVS, linksFS);\n            gl.useProgram(program);\n            locations = utils.getLocations(program, ['a_vertexPos', 'a_color', 'u_screenSize', 'u_transform']);\n\n            gl.enableVertexAttribArray(locations.vertexPos);\n            gl.enableVertexAttribArray(locations.color);\n\n            buffer = gl.createBuffer();\n        },\n\n        position: function (linkUi, fromPos, toPos) {\n            var linkIdx = linkUi.id,\n                offset = linkIdx * ATTRIBUTES_PER_PRIMITIVE;\n            positions[offset] = fromPos.x;\n            positions[offset + 1] = fromPos.y;\n            colors[offset + 2] = linkUi.color;\n\n            positions[offset + 3] = toPos.x;\n            positions[offset + 4] = toPos.y;\n            colors[offset + 5] = linkUi.color;\n        },\n\n        createLink : function (ui) {\n            ensureEnoughStorage();\n\n            linksCount += 1;\n            frontLinkId = ui.id;\n        },\n\n        removeLink : function (ui) {\n            if (linksCount > 0) { linksCount -= 1; }\n            // swap removed link with the last link. This will give us O(1) performance for links removal:\n            if (ui.id < linksCount && linksCount > 0) {\n                // using colors as a view to array buffer is okay here.\n                utils.copyArrayPart(colors, ui.id * ATTRIBUTES_PER_PRIMITIVE, linksCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\n            }\n        },\n\n        updateTransform : function (newTransform) {\n            sizeDirty = true;\n            transform = newTransform;\n        },\n\n        updateSize : function (w, h) {\n            width = w;\n            height = h;\n            sizeDirty = true;\n        },\n\n        render : function () {\n            gl.useProgram(program);\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, storage, gl.DYNAMIC_DRAW);\n\n            if (sizeDirty) {\n                sizeDirty = false;\n                gl.uniformMatrix4fv(locations.transform, false, transform);\n                gl.uniform2f(locations.screenSize, width, height);\n            }\n\n            gl.vertexAttribPointer(locations.vertexPos, 2, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);\n            gl.vertexAttribPointer(locations.color, 4, gl.UNSIGNED_BYTE, true, 3 * Float32Array.BYTES_PER_ELEMENT, 2 * 4);\n\n            gl.drawArrays(gl.LINES, 0, linksCount * 2);\n\n            frontLinkId = linksCount - 1;\n        },\n\n        bringToFront : function (link) {\n            if (frontLinkId > link.id) {\n                utils.swapArrayPart(positions, link.id * ATTRIBUTES_PER_PRIMITIVE, frontLinkId * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\n            }\n            if (frontLinkId > 0) {\n                frontLinkId -= 1;\n            }\n        },\n\n        getFrontLinkId : function () {\n            return frontLinkId;\n        }\n    };\n}\n\n},{\"./webgl.js\":57}],64:[function(require,module,exports){\n/**\n * @fileOverview Defines a naive form of nodes for webglGraphics class.\n * This form allows to change color of node. Shape of nodes is rectangular.\n *\n * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka\n */\n\nvar glUtils = require('./webgl.js');\n\nmodule.exports = webglNodeProgram;\n\n/**\n * Defines simple UI for nodes in webgl renderer. Each node is rendered as square. Color and size can be changed.\n */\nfunction webglNodeProgram() {\n  var ATTRIBUTES_PER_PRIMITIVE = 4; // Primitive is point, x, y, size, color\n  // x, y, z - floats, color = uint.\n  var BYTES_PER_NODE = 3 * Float32Array.BYTES_PER_ELEMENT + Uint32Array.BYTES_PER_ELEMENT;\n  var nodesFS = [\n    'precision mediump float;',\n    'varying vec4 color;',\n\n    'void main(void) {',\n    '   gl_FragColor = color;',\n    '}'\n  ].join('\\n');\n  var nodesVS = [\n    'attribute vec3 a_vertexPos;',\n    'attribute vec4 a_color;',\n    'uniform vec2 u_screenSize;',\n    'uniform mat4 u_transform;',\n    'varying vec4 color;',\n\n    'void main(void) {',\n    '   gl_Position = u_transform * vec4(a_vertexPos.xy/u_screenSize, 0, 1);',\n    '   gl_PointSize = a_vertexPos.z * u_transform[0][0];',\n    '   color = a_color.abgr;',\n    '}'\n  ].join('\\n');\n\n  var program;\n  var gl;\n  var buffer;\n  var locations;\n  var utils;\n  var storage = new ArrayBuffer(16 * BYTES_PER_NODE);\n  var positions = new Float32Array(storage);\n  var colors = new Uint32Array(storage);\n  var nodesCount = 0;\n  var width;\n  var height;\n  var transform;\n  var sizeDirty;\n\n  return {\n    load: load,\n\n    /**\n     * Updates position of node in the buffer of nodes.\n     *\n     * @param idx - index of current node.\n     * @param pos - new position of the node.\n     */\n    position: position,\n\n    updateTransform: updateTransform,\n\n    updateSize: updateSize,\n\n    removeNode: removeNode,\n\n    createNode: createNode,\n\n    replaceProperties: replaceProperties,\n\n    render: render\n  };\n\n  function ensureEnoughStorage() {\n    if ((nodesCount + 1) * BYTES_PER_NODE >= storage.byteLength) {\n      // Every time we run out of space create new array twice bigger.\n      // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs\n      var extendedStorage = new ArrayBuffer(storage.byteLength * 2),\n        extendedPositions = new Float32Array(extendedStorage),\n        extendedColors = new Uint32Array(extendedStorage);\n\n      extendedColors.set(colors); // should be enough to copy just one view.\n      positions = extendedPositions;\n      colors = extendedColors;\n      storage = extendedStorage;\n    }\n  }\n\n  function load(glContext) {\n    gl = glContext;\n    utils = glUtils(glContext);\n\n    program = utils.createProgram(nodesVS, nodesFS);\n    gl.useProgram(program);\n    locations = utils.getLocations(program, ['a_vertexPos', 'a_color', 'u_screenSize', 'u_transform']);\n\n    gl.enableVertexAttribArray(locations.vertexPos);\n    gl.enableVertexAttribArray(locations.color);\n\n    buffer = gl.createBuffer();\n  }\n\n  function position(nodeUI, pos) {\n    var idx = nodeUI.id;\n\n    positions[idx * ATTRIBUTES_PER_PRIMITIVE] = pos.x;\n    positions[idx * ATTRIBUTES_PER_PRIMITIVE + 1] = -pos.y;\n    positions[idx * ATTRIBUTES_PER_PRIMITIVE + 2] = nodeUI.size;\n\n    colors[idx * ATTRIBUTES_PER_PRIMITIVE + 3] = nodeUI.color;\n  }\n\n  function updateTransform(newTransform) {\n    sizeDirty = true;\n    transform = newTransform;\n  }\n\n  function updateSize(w, h) {\n    width = w;\n    height = h;\n    sizeDirty = true;\n  }\n\n  function removeNode(node) {\n      if (nodesCount > 0) {\n        nodesCount -= 1;\n      }\n\n      if (node.id < nodesCount && nodesCount > 0) {\n        // we can use colors as a 'view' into array array buffer.\n        utils.copyArrayPart(colors, node.id * ATTRIBUTES_PER_PRIMITIVE, nodesCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);\n      }\n    }\n\n  function createNode() {\n    ensureEnoughStorage();\n    nodesCount += 1;\n  }\n\n  function replaceProperties(/* replacedNode, newNode */) {}\n\n  function render() {\n    gl.useProgram(program);\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, storage, gl.DYNAMIC_DRAW);\n\n    if (sizeDirty) {\n      sizeDirty = false;\n      gl.uniformMatrix4fv(locations.transform, false, transform);\n      gl.uniform2f(locations.screenSize, width, height);\n    }\n\n    gl.vertexAttribPointer(locations.vertexPos, 3, gl.FLOAT, false, ATTRIBUTES_PER_PRIMITIVE * Float32Array.BYTES_PER_ELEMENT, 0);\n    gl.vertexAttribPointer(locations.color, 4, gl.UNSIGNED_BYTE, true, ATTRIBUTES_PER_PRIMITIVE * Float32Array.BYTES_PER_ELEMENT, 3 * 4);\n\n    gl.drawArrays(gl.POINTS, 0, nodesCount);\n  }\n}\n\n},{\"./webgl.js\":57}],65:[function(require,module,exports){\nvar parseColor = require('./parseColor.js');\n\nmodule.exports = webglSquare;\n\n/**\n * Can be used as a callback in the webglGraphics.node() function, to\n * create a custom looking node.\n *\n * @param size - size of the node in pixels.\n * @param color - color of the node in '#rrggbbaa' or '#rgb' format.\n */\nfunction webglSquare(size, color) {\n  return {\n    /**\n     * Gets or sets size of the square side.\n     */\n    size: typeof size === 'number' ? size : 10,\n\n    /**\n     * Gets or sets color of the square.\n     */\n    color: parseColor(color)\n  };\n}\n\n},{\"./parseColor.js\":55}],66:[function(require,module,exports){\n// todo: this should be generated at build time.\nmodule.exports = '0.8.1';\n\n},{}]},{},[1])(1)\n});","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"sourceRoot":""}